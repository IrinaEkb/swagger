{
  "openapi": "3.0.0",
  "info": {
    "title": "iAuditor by SafetyCulture API",
    "version": "v1.157.1"
  },
  "tags": [
    {
      "name": "Directory"
    }
  ],
  "paths": {
    "/audits": {
      "post": {
        "summary": "Start a new inspection",
        "operationId": "ThePubService_StartInspection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.StartInspectionResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.StartInspectionRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Inspections"
        ]
      }
    },
    "/audits/{audit_id}/deep_link": {
      "post": {
        "summary": "Generate a deep link for an inspection",
        "description": "Generate a URL to the inspection with the supplied inspection ID. The link will open in the iAuditor mobile application if clicked on a mobile device with the iAuditor app installed. Otherwise it will open the inspection in the iAuditor web application.",
        "operationId": "ThePubService_GetInspectionDeepLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.GetInspectionDeepLinkResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "audit_id",
            "description": "The id of the inspection to retrieve a deep link for.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Inspections"
        ]
      }
    },
    "/audits/{audit_id}/share": {
      "post": {
        "summary": "Share an inspection to the specified user or group.",
        "operationId": "ThePubService_ShareInspection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.Inspection"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "audit_id",
            "description": "The id of the inspection to share.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shares": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/s12.thepub.v1.ShareInspectionRequest.Share"
                    },
                    "description": "The users and groups to share with."
                  }
                },
                "description": "The parameters for `ShareInspection`",
                "title": "ShareInspectionRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Inspections"
        ]
      }
    },
    "/audits/{audit_id}/web_report_link": {
      "get": {
        "summary": "Retreive the web report link for the specified inspection. This will return\nthe existing link if one has been generated before, or generate a new one\nif one does not exist already.\n</br></br>\nThis link does not expire, it is valid until deleted.",
        "operationId": "ThePubService_GetInspectionWebReportLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.GetInspectionWebReportLinkResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "audit_id",
            "description": "The id of the inspection to retrieve a web report link for.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Inspections"
        ],
        "externalDocs": {
          "url": "https://help.safetyculture.com/en_us/000687-BkzsulyUv"
        }
      },
      "delete": {
        "summary": "Delete the web report link for an inspection. Doing this will prevent\npreviously shared links from working.",
        "operationId": "ThePubService_DeleteInspectionWebReportLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.DeleteInspectionWebReportLinkResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "audit_id",
            "description": "The id of the inspection to delete a web report link for.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Inspections"
        ],
        "externalDocs": {
          "url": "https://help.safetyculture.com/en_us/000687-BkzsulyUv"
        }
      }
    },
    "/directory/v1/folder": {
      "post": {
        "summary": "Create a folder",
        "operationId": "Directory_CreateFolder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.CreateFolderResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.directory.v1.CreateFolderRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/folder/{folder_id}/users": {
      "delete": {
        "summary": "Remove association for multiple users to a specific folder",
        "operationId": "Directory_RemoveUsersAssociation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.RemoveUsersAssociationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "folder_id",
            "description": "Required. The folder identifier we want to remove users from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_ids",
            "description": "Required. List of User IDs to remove association to given folder\nFor example: '[user_5441fffcde344415bb7ccaceda27e196,\nuser_6441fffcde344415bb7ccaceda27e196]'",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      },
      "post": {
        "summary": "Associate multiple users access to a specific folder",
        "operationId": "Directory_AddUsersAssociation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.AddUsersAssociationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "folder_id",
            "description": "Required. The folder identifier we want to associate users to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Required. List of User IDs to associate to given folder\nFor example: '[user_5441fffcde344415bb7ccaceda27e196,\nuser_6441fffcde344415bb7ccaceda27e196]'"
                  }
                },
                "description": "The parameters for `AddUsersAssociationRequest`",
                "title": "AddUsersAssociationRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/folder/{id}": {
      "get": {
        "summary": "Retrieve a folder",
        "operationId": "Directory_GetFolder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.GetFolderResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The folder identifier to retrieve info for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_ancestors",
            "description": "When true, an array of the folders ancestors will also be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_all_children_count",
            "description": "When true, the total count of all children underneath the folder will be\nreturned. This is a recursive count and will include children of children",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      },
      "patch": {
        "summary": "Update a folder",
        "operationId": "Directory_UpdateFolderProperties",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.UpdateFolderPropertiesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The folder identifier of the folder to be updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/s12.directory.v1.UpdateFolderPropertiesRequest.FolderName"
                  },
                  "domain": {
                    "type": "string",
                    "title": "domain represents the type/domain/hierarchy for the folder. This is\nused for changing the properties of a specific domain folder"
                  }
                },
                "description": "The parameters for `UpdateFolderPropertiesRequest`",
                "title": "UpdateFolderPropertiesRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/folder/{id}/users": {
      "get": {
        "summary": "Retrieve users associated to a folder, includes both directly and\nindirectly (inherited)",
        "operationId": "Directory_GetAllUsersByFolder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.GetAllUsersByFolderResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The folder identifier we want to get all the users for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "get_users_of_descendants",
            "description": "Optional. When true, it will return all of the members of a specified folder\nand its children folders recursively. Default false, will return all of the\nmembers of a specified folder and its parent/ancestor folders.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/folder/{id}/users/associated": {
      "get": {
        "summary": "Retrieve users directly associated to a folder",
        "operationId": "Directory_GetUsersByFolder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.GetUsersByFolderResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The folder identifier we want to get the users for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/folder/{id}/users/inherited": {
      "get": {
        "summary": "Retrieve users indirectly associated (inherited) to a folder",
        "operationId": "Directory_GetInheritedUsersByFolder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.GetInheritedUsersByFolderResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The folder identifier we want to get the users for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/folders": {
      "get": {
        "summary": "List folders",
        "operationId": "Directory_GetFolders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.GetFoldersResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "Required. This determines the max number of folders returned in the\nresponse.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_token",
            "description": "Optional. base64 encoded. If this field is present, the list of folders\nreturned will start from the row after this token.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_by.sort_field",
            "description": "The field to order by\n\n - SORT_FIELD_UNSPECIFIED: The sort field is unspecified\n - SORT_FIELD_NAME: Sort the folder by name\n - SORT_FIELD_FOLDER_ID: Sort the folders by folder id\n - SORT_FIELD_USER_ID: Sort the folders by user id\n - SORT_FIELD_CREATED_AT: Sort the folders by created at\n - SORT_FIELD_MODIFIED_AT: Sort the folders by modified at",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "SORT_FIELD_UNSPECIFIED",
                "SORT_FIELD_NAME",
                "SORT_FIELD_FOLDER_ID",
                "SORT_FIELD_USER_ID",
                "SORT_FIELD_CREATED_AT",
                "SORT_FIELD_MODIFIED_AT"
              ],
              "default": "SORT_FIELD_UNSPECIFIED"
            }
          },
          {
            "name": "order_by.sort_order",
            "description": "The direction to order by\n\n - SORT_ORDER_UNSPECIFIED: The sort order is not specified\n - SORT_ORDER_ASCENDING: The sort order is asc\n - SORT_ORDER_DESCENDING: The sort order is desc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "SORT_ORDER_UNSPECIFIED",
                "SORT_ORDER_ASCENDING",
                "SORT_ORDER_DESCENDING"
              ],
              "default": "SORT_ORDER_UNSPECIFIED"
            }
          },
          {
            "name": "only_leaf_nodes",
            "description": "Optional. When true, GetFolders will only return leaf node folders. leaf\nnodes are folders that do not have children  Defaults to false.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "with_ancestors",
            "description": "Optional. When true, folders will be returned with a list of their\nancestors as well. Defaults to false",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_deleted",
            "description": "When true, deleted folders will also be returned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ignore_folders_disabled",
            "description": "Optional. When true, folders will still be returned when disabled for the\norganisation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "domain",
            "description": "domain represents the type/domain/hierarchy for the folder. This is used\nfor getting folders of a certain domain, i.e. getting all `template`\nfolders or `site` folders",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      },
      "delete": {
        "summary": "Bulk delete folders",
        "operationId": "Directory_DeleteFolders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.DeleteFoldersResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "folder_ids",
            "description": "Required. Folder ids of the folders to be deleted",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cascade_up",
            "description": "Deleting folders will always cascade down. If a parent is deleted, then all\nof its children are deleted. When cascade_up is true, if a child is\ndeleted, and it's parent no longer has any children, then it will be\ndeleted too. This will cascade all the way up the tree.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "domain",
            "description": "domain represents the type/domain/hierarchy for the folder. This is used\nfor deleting folders within a specified domain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/user/folder_ids": {
      "get": {
        "summary": "List folders the requesting user is associated with",
        "operationId": "Directory_GetFolderIDsForUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.GetFolderIDsForUserResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "tags": [
          "Directory"
        ]
      }
    },
    "/directory/v1/user/{user_id}/folders": {
      "delete": {
        "summary": "Disassociate a specific user from multiple folders",
        "operationId": "Directory_RemoveFoldersAssociation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.RemoveFoldersAssociationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "Required. The user identifier we want to remove folders from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder_ids",
            "description": "Required. List of folder IDs to remove association to given user",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "tags": [
          "Directory"
        ]
      },
      "post": {
        "summary": "Associate a specific user with multiple folders",
        "operationId": "Directory_AddFoldersAssociation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.directory.v1.AddFoldersAssociationResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "Required. The user identifier we want to associate folders to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "folder_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "title": "Required. List of Folder IDs to associate user with",
                    "required": [
                      "folder_ids"
                    ]
                  }
                },
                "description": "The parameters for `AddFoldersAssociationRequest`",
                "title": "AddFoldersAssociationRequest",
                "required": [
                  "folder_ids"
                ]
              }
            }
          },
          "required": true
        },
        "tags": [
          "Directory"
        ]
      }
    },
    "/groups": {
      "get": {
        "summary": "List the groups within the organization.",
        "operationId": "ThePubService_ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.ListGroupsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "tags": [
          "Users & Groups"
        ]
      },
      "post": {
        "summary": "Create a new group in the organization.",
        "operationId": "ThePubService_CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.CreateGroupResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.CreateGroupRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/groups/{group_id}/users": {
      "get": {
        "summary": "List the users in a group.",
        "operationId": "ThePubService_ListUsersInGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.ListUsersInGroupResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The id of the group to list the users in.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "The maximum number of users to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "description": "The offset to start listing users from.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "description": "The status to filter users by.\n\n - active: Active user.\n - inactive: Inactive User",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive"
                ]
              }
            }
          }
        ],
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/groups/{group_id}/users/v2": {
      "post": {
        "summary": "Add a user to a group within the organization.",
        "operationId": "ThePubService_AddNewUserToGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.AddNewUserToGroupResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The id of the group to add the user to.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The id of the user to be added to the group."
                  }
                },
                "description": "The parameters for `AddNewUserToGroup`",
                "title": "AddNewUserToGroupRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/groups/{group_id}/users/{user_id}": {
      "delete": {
        "summary": "Remove a user from a group or organization",
        "operationId": "ThePubService_RemoveUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.RemoveUserResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The group or organisation id that the user is to be removed from.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "description": "The id of the user to be removed.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replacement_user",
            "description": "The user to reassign data to when removing the user from an organisation.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/inspections/v1/inspection:CloneInspection": {
      "post": {
        "summary": "Clone an inspection",
        "operationId": "InspectionService_CloneInspection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.inspections.v1.CloneInspectionResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.inspections.v1.CloneInspectionRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Inspections"
        ]
      }
    },
    "/reports/v1/export/Inspection": {
      "post": {
        "summary": "Export inspection web report to document",
        "operationId": "ReportsService_StartInspectionExport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Inspections"
        ]
      }
    },
    "/response_sets": {
      "post": {
        "summary": "Create a global response set.",
        "operationId": "ThePubService_CreateGlobalResponseSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.CreateGlobalResponseSetResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.CreateGlobalResponseSetRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      }
    },
    "/response_sets/v2": {
      "get": {
        "summary": "List all global response sets.",
        "operationId": "ThePubService_ListAllGlobalResponseSets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.ListAllGlobalResponseSetsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "The maximum number of results to return.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      }
    },
    "/response_sets/{id}": {
      "get": {
        "summary": "Get a global response set",
        "operationId": "ThePubService_GetGlobalResponseSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.GetGlobalResponseSetResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the global response set.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      },
      "delete": {
        "summary": "Delete a global response set",
        "operationId": "ThePubService_DeleteGlobalResponseSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.DeleteGlobalResponseSetResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the global response set.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      },
      "put": {
        "summary": "Update a global response set",
        "operationId": "ThePubService_UpdateGlobalResponseSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.UpdateGlobalResponseSetResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the global response set.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the global response set."
                  },
                  "responses": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/s12.thepub.v1.UpdateGRSResponse"
                    },
                    "description": "The responses to add to the global response set."
                  }
                },
                "description": "The parameters for `UpdateGlobalResponseSet`",
                "title": "UpdateGlobalResponseSetRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      }
    },
    "/response_sets/{id}/responses": {
      "post": {
        "summary": "Create a global response set response",
        "operationId": "ThePubService_CreateGRSResponse",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.CreateGRSResponseResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the global response set.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.UpdateGRSResponse"
              }
            }
          },
          "description": "The response to add to the global response set.",
          "required": true
        },
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      }
    },
    "/response_sets/{id}/responses/{response_id}": {
      "delete": {
        "summary": "Delete a global response set response",
        "operationId": "ThePubService_DeleteGRSResponse",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.DeleteGRSResponseResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the global response set.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_id",
            "description": "The id of response to delete.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      },
      "put": {
        "summary": "Update a global response set response",
        "operationId": "ThePubService_UpdateGRSResponse",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.UpdateGRSResponseResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the global response set.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_id",
            "description": "The id of response to update.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.UpdateGRSResponse"
              }
            }
          },
          "description": "The response to update.",
          "required": true
        },
        "tags": [
          "Response Sets"
        ],
        "externalDocs": {
          "description": "Learn more about global response sets (GRS)",
          "url": "https://help.safetyculture.com/en_us/1064273140-B1GTmOFNw"
        }
      }
    },
    "/schedules/v1/schedule_items": {
      "get": {
        "summary": "Lists Schedule Items for the authorized user",
        "operationId": "SchedulesService_ListScheduleItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.schedules.v1.ListScheduleItemsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "Number of messages to be returned in a single request. Maximun\n100. Non-positive values are ignored.  The presence of `next_page_token` in\nthe response indicates that more results might be available. For example:\n'20'",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_token",
            "description": "If present, then retrieve the next batch of results from the\npreceding call to this method.  `page_token` must be the value of\n`next_page_token` from the previous response.  The values of other method\nparameters should be identical to those in the previous call.\nFor example: 'MzA='",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statuses",
            "description": "Filter ScheduleItems to those with one of the the given status\n\n - STATUS_UNSPECIFIED: Unspecified status value\n - ACTIVE: Default value - schedule item is still active\n - PAUSED: Schedule has been paused e.g. manually paused/org frozen\n - NO_TEMPLATE: The template used for this schedule item has been deleted/archived\n - NO_ASSIGNEE: No valid assignees exist for this schedule item anymore\n - FINISHED: The schedule item has hit its end date or count limit and is now complete",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "STATUS_UNSPECIFIED",
                  "ACTIVE",
                  "PAUSED",
                  "NO_TEMPLATE",
                  "NO_ASSIGNEE",
                  "FINISHED"
                ]
              }
            }
          }
        ],
        "tags": [
          "Schedules"
        ]
      },
      "post": {
        "summary": "Creates a new Schedule Item",
        "operationId": "SchedulesService_CreateScheduleItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.schedules.v1.CreateScheduleItemResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.schedules.v1.UpdateScheduleItem"
              }
            }
          },
          "description": "The schedule item to be created",
          "required": true
        },
        "tags": [
          "Schedules"
        ]
      }
    },
    "/schedules/v1/schedule_items/{id}": {
      "delete": {
        "summary": "Deletes a Schedule Item",
        "operationId": "SchedulesService_DeleteScheduleItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.schedules.v1.DeleteScheduleItemResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Schedules"
        ]
      },
      "put": {
        "summary": "Updates an existing Schedule Item",
        "operationId": "SchedulesService_UpdateScheduleItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.schedules.v1.UpdateScheduleItemResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the schedule item to update",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.schedules.v1.UpdateScheduleItem"
              }
            }
          },
          "description": "The new schedule item",
          "required": true
        },
        "tags": [
          "Schedules"
        ]
      }
    },
    "/share/connections": {
      "get": {
        "summary": "Retrieve the groups and organizations the requesting user belongs to.",
        "operationId": "ThePubService_GetUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.GetUserGroupsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/tasks/v1/actions": {
      "post": {
        "summary": "Create an action",
        "operationId": "ActionsService_CreateAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.CreateActionRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/delete": {
      "post": {
        "summary": "Bulk delete actions",
        "operationId": "ActionsService_DeleteActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.DeleteActionsRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/list": {
      "post": {
        "summary": "Retrieve a list of actions that the user has access to.\nAn array of filters can be configured in the request, which will filter the\nactions returned in the response. If no filter is provided, then all\nactions that the user has access to will be returned.",
        "operationId": "ActionsService_GetActions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.ActionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{id}": {
      "get": {
        "summary": "Returns a single action that the user has access to.",
        "operationId": "ActionsService_GetAction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.ActionResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID to query data for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/assignees": {
      "put": {
        "summary": "Update the assignees of an action",
        "operationId": "ActionsService_UpdateAssignees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.UpdateAssigneesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The unique identifier for the task to be updated",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignees": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
                    },
                    "title": "Required. The assignees to be assigned to the task"
                  },
                  "modified_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional. The UTC time and date the modification took place."
                  }
                },
                "title": "UpdateAssigneesRequest represents the parameters for\n`UpdateAssignees`"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/description": {
      "put": {
        "summary": "Update the description of an action",
        "operationId": "ActionsService_UpdateDescription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateDescriptionBody"
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/due_at": {
      "put": {
        "summary": "Update the due date of an action",
        "operationId": "ActionsService_UpdateDueAt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateDueAtBody"
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/priority": {
      "put": {
        "summary": "Update the priority of an action",
        "operationId": "ActionsService_UpdatePriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdatePriorityBody"
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/site": {
      "put": {
        "summary": "Update the site of an action",
        "operationId": "ActionsService_UpdateSite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.UpdateSiteResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateSiteBody"
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/status": {
      "put": {
        "summary": "Update the status of an action",
        "operationId": "ActionsService_UpdateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The ID of the task whose status you are updating.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateStatusBody"
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/actions/{task_id}/title": {
      "put": {
        "summary": "Update the title of an action",
        "operationId": "ActionsService_UpdateTitle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateTitleBody"
        },
        "tags": [
          "Actions"
        ]
      }
    },
    "/tasks/v1/customerconfiguration/categories": {
      "get": {
        "summary": "Retrieves all categories for the organisation.",
        "operationId": "CustomerConfigurationService_GetCategories",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.GetCategoriesResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "include_deleted",
            "description": "Optional. If this is set to true, all categories including deleted\ncategories will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents": {
      "post": {
        "summary": "Create an issue",
        "operationId": "IncidentsService_CreateIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.CreateIncidentRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/delete": {
      "post": {
        "summary": "Delete multiple issues by their UUIDs.\nThe requesting user must have issues admin permissions.",
        "operationId": "IncidentsService_DeleteIncidents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.DeleteIncidentsRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/list": {
      "post": {
        "summary": "Returns a list of issues that the user has access to.\nAn array of filters can be configured in the request, which will filter the\nissues returned in the response. If no filter is provided, then all\nissues that the user has access to will be returned.",
        "operationId": "IncidentsService_GetIncidents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.IncidentsResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{id}": {
      "get": {
        "summary": "Returns a single issue that the user has access to.",
        "operationId": "IncidentsService_GetIncident",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.IncidentResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID to query data for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/category": {
      "put": {
        "summary": "Update the category of the issue",
        "operationId": "IncidentsService_UpdateCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the issue being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "category_id": {
                    "type": "string",
                    "description": "Required. The new category UUID for the issue.\nCall the `GetCategories` endpoint to get the available categories."
                  },
                  "modified_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional. The timestamp of when this event occurred."
                  }
                },
                "title": "UpdateCategoryRequest represents the parameters to `UpdateCategory`"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/collaborators/add": {
      "post": {
        "summary": "Add an assignee to the issue",
        "operationId": "IncidentsService_AddCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collaborators": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
                    },
                    "description": "Required. The collaborators to be added to the task."
                  },
                  "modified_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional. The timestamp of when this event occurred."
                  }
                },
                "title": "AddCollaboratorsRequest represents the parameters to add collaborators to the\ntask"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/collaborators/remove": {
      "post": {
        "summary": "Remove the assignee from the issue",
        "operationId": "IncidentsService_RemoveCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "collaborators": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
                    },
                    "description": "Required. The collaborators to be removed from the task."
                  },
                  "modified_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional. The timestamp of when this event occurred."
                  }
                },
                "title": "RemoveCollaboratorsRequest represents the parameters to remove the\ncollaborators from the task"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/description": {
      "put": {
        "summary": "Update the description of the issue",
        "operationId": "IncidentsService_UpdateDescription",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateDescriptionBody"
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/due_at": {
      "put": {
        "summary": "Update the due date of the issue",
        "operationId": "IncidentsService_UpdateDueAt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateDueAtBody"
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/pdf_report": {
      "get": {
        "summary": "Returns a link to a PDF report of the issue.",
        "operationId": "IncidentsService_GetPDFReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.GetPDFReportResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "The ID of the incident which the report is being created for",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/priority": {
      "put": {
        "summary": "Update the priority of the issue",
        "operationId": "IncidentsService_UpdatePriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdatePriorityBody"
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/site": {
      "put": {
        "summary": "Update the site of the issue",
        "operationId": "IncidentsService_UpdateSite",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.UpdateSiteResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateSiteBody"
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/status": {
      "put": {
        "summary": "Updates the status of an issue.",
        "operationId": "IncidentsService_UpdateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The ID of the task whose status you are updating.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateStatusBody"
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/incidents/{task_id}/title": {
      "put": {
        "summary": "Update the title of the issue",
        "operationId": "IncidentsService_UpdateTitle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The UUID of the task being updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ActionsService_UpdateTitleBody"
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/shared_link/{task_id}/web_report": {
      "post": {
        "summary": "Returns a shareable link to access an issue's web report.",
        "operationId": "SharedLinkService_GenerateForWebReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.GenerateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "task_id",
            "description": "Required. The unique identifier of the issue to create a shareable link for.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "path_prefix": {
                    "type": "string",
                    "description": "@deprecated: This was a field used to specify part of the generated URL.\nThis is no longer used as the URL is now fixed."
                  }
                },
                "title": "GenerateRequest represents the parameters to `GenerateWebReportSharedLink`"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues"
        ]
      }
    },
    "/tasks/v1/timeline": {
      "post": {
        "summary": "Returns the timeline for a particular task.",
        "operationId": "TimelineService_GetTimeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.tasks.v1.GetTimelineResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.GetTimelineRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues",
          "Actions"
        ]
      }
    },
    "/tasks/v1/timeline/comments": {
      "post": {
        "summary": "Add a comment to a task's timeline.",
        "operationId": "TimelineService_AddComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.tasks.v1.AddCommentRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Issues",
          "Actions"
        ]
      }
    },
    "/templates/v1/template:ArchiveTemplate": {
      "post": {
        "summary": "Archive a template",
        "operationId": "TemplatesService_ArchiveTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.templates.v1.ArchiveTemplateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.templates.v1.ArchiveTemplateRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Templates"
        ]
      }
    },
    "/templates/v1/templates/{template_id}/archive": {
      "post": {
        "summary": "Archive a template",
        "operationId": "TemplatesService_ArchiveTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.templates.v1.ArchiveTemplateResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "template_id",
            "description": "The unique identifier for the template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "The parameter body to `ArchiveTemplate`"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Templates"
        ]
      }
    },
    "/users": {
      "post": {
        "summary": "Create a new user in the organization.",
        "operationId": "ThePubService_AddUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.AddUserResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.AddUserRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/users/search": {
      "post": {
        "summary": "Search for specific users.",
        "operationId": "ThePubService_SearchUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.SearchUsersResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s12.thepub.v1.SearchUsersRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users & Groups"
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Retrieve a user's details.",
        "operationId": "ThePubService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.GetUserResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "The id of the user to be retrieved.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users & Groups"
        ]
      },
      "put": {
        "summary": "Update a user's details.",
        "operationId": "ThePubService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/s12.thepub.v1.UpdateUserResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/google.rpc.Status"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "The id of the user to be updated.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string",
                    "description": "The first name of the user."
                  },
                  "lastname": {
                    "type": "string",
                    "description": "The last name of the user."
                  },
                  "new_email": {
                    "type": "string",
                    "description": "The email address of the user."
                  },
                  "status": {
                    "$ref": "#/components/schemas/s12.thepub.v1.ThePubUserStatus"
                  }
                },
                "description": "The parameters for `UpdateUser`",
                "title": "UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Users & Groups"
        ]
      }
    }
  },
  "components": {
    "requestBodies": {
      "ActionsService_UpdateTitleBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Required. The new title for the task.\nThe title must be between 0 and 255 characters."
                },
                "modified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. The timestamp of when this event occurred."
                }
              },
              "title": "UpdateTitleRequest represents the parameters to update the title of the task"
            }
          }
        },
        "required": true
      },
      "ActionsService_UpdatePriorityBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "priority_id": {
                  "type": "string",
                  "description": "Required. The new priority UUID for the task."
                },
                "modified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. The timestamp of when this event occurred."
                }
              },
              "title": "UpdatePriorityRequest represents the parameters to update the priority of the\ntask"
            }
          }
        },
        "required": true
      },
      "ActionsService_UpdateSiteBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "site_id": {
                  "$ref": "#/components/schemas/s12.common.UUIDValue"
                },
                "modified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. The timestamp of when this event occurred."
                }
              },
              "title": "UpdateSiteRequest represents the parameter to update the site (folder)\nassociated to a task"
            }
          }
        },
        "required": true
      },
      "ActionsService_UpdateDueAtBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "due_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. Date/time this task is due.\nIf this is empty, \"due at\" will be unset."
                },
                "modified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. The timestamp of when this event occurred."
                }
              },
              "title": "UpdateDueAtRequest represents the parameter to update the due date of the\ntask"
            }
          }
        },
        "required": true
      },
      "ActionsService_UpdateDescriptionBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Required. The new description for the task."
                },
                "modified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. The timestamp of when this event occurred."
                }
              },
              "title": "UpdateDescriptionRequest represents the parameters to update the description\nof the task"
            }
          }
        },
        "required": true
      },
      "ActionsService_UpdateStatusBody": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status_id": {
                  "type": "string",
                  "description": "Required. The ID of the status you are updating the task to.\nAn incident can be open or resolved, and these are represented by hardcoded\nUUID values.\nOpen status: `547ed646-5e34-4732-bb54-a199d304368a`.\nResolved status: `450484b1-56cd-4784-9b49-a3cf97d0c0ad`."
                },
                "modified_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Optional. The UTC time and date the modification took place."
                }
              },
              "description": "UpdateStatusRequest represents the parameters for `UpdateStatus`."
            }
          }
        },
        "required": true
      }
    },
    "schemas": {
      "google.protobuf.Any": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
          }
        },
        "additionalProperties": {},
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
      },
      "google.rpc.Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/google.protobuf.Any"
            }
          }
        }
      },
      "s12.common.Color": {
        "type": "object",
        "properties": {
          "red": {
            "type": "number",
            "format": "float",
            "description": "The amount of red in the color as a value in the interval [0, 255]."
          },
          "green": {
            "type": "number",
            "format": "float",
            "description": "The amount of green in the color as a value in the interval [0, 255]."
          },
          "blue": {
            "type": "number",
            "format": "float",
            "description": "The amount of blue in the color as a value in the interval [0, 255]."
          }
        },
        "title": "Color represents a color representation of given option and is decimal\nrepresentation of RGB"
      },
      "s12.common.GeoPosition": {
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "format": "double",
            "title": "The geographical longitude"
          },
          "latitude": {
            "type": "number",
            "format": "double",
            "title": "The geographical latitude"
          },
          "accuracy": {
            "type": "integer",
            "format": "int32",
            "title": "The accuracy in meters"
          }
        },
        "description": "A position is the fundamental geographical geometry construct."
      },
      "s12.common.Media": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "filename": {
            "type": "string",
            "title": "full file name, including file extension"
          },
          "media_type": {
            "$ref": "#/components/schemas/s12.common.MediaType"
          }
        },
        "title": "Represents an image or video"
      },
      "s12.common.MediaType": {
        "type": "string",
        "enum": [
          "MEDIA_TYPE_NONE_UNSPECIFIED",
          "MEDIA_TYPE_IMAGE",
          "MEDIA_TYPE_VIDEO",
          "MEDIA_TYPE_PDF",
          "MEDIA_TYPE_DOCUMENT"
        ],
        "default": "MEDIA_TYPE_NONE_UNSPECIFIED",
        "title": "- MEDIA_TYPE_NONE_UNSPECIFIED: none/unspecified type for legacy cases\ndefaults to the image type\n - MEDIA_TYPE_IMAGE: image media type\n - MEDIA_TYPE_VIDEO: video media type\n - MEDIA_TYPE_PDF: PDF media type\n - MEDIA_TYPE_DOCUMENT: @deprecated: Use MEDIA_TYPE_PDF instead for PDFs\ndocument media type"
      },
      "s12.common.TemperatureUnit": {
        "type": "string",
        "enum": [
          "UNKNOWN_TEMPERATURE_UNIT",
          "KELVIN",
          "CELSIUS",
          "FAHRENHEIT"
        ],
        "default": "UNKNOWN_TEMPERATURE_UNIT",
        "description": "- UNKNOWN_TEMPERATURE_UNIT: Represents an Unknown temperature unit\n - KELVIN: Represents Kelvin temperature unit\n - CELSIUS: Represents Celsius temperature unit\n - FAHRENHEIT: Represents Fahrenheit temperature unit",
        "title": "Represents different units to measure temperature"
      },
      "s12.common.UUIDValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "description": "Wrapper message for a string representation of a `UUID`."
      },
      "s12.directory.v1.AddFoldersAssociationResponse": {
        "type": "object",
        "properties": {
          "folder_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.directory.v1.AddFoldersAssociationResponse.Status"
            },
            "title": "Map of folders ids with their resulting status after being associated to\nthe user. This map is populated with the list of folders\npassed in through the `AddFoldersAssociationRequest`\nFor example: <Key,Value> -> <5441fffcde344415bb7ccaceda27e196,\nStatus>"
          },
          "revoked_membership_folder_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of folder ids that the user has lost direct membership of. Being a\nmember of a parent folder is the same as being a member of the child, so we\nremove this association."
          }
        },
        "description": "Result returned from `AddFoldersAssociationResponse`",
        "title": "AddFoldersAssociationResponse"
      },
      "s12.directory.v1.AddFoldersAssociationResponse.Status": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "ADDED",
          "DUPLICATE",
          "FAILED",
          "STATUS_ALREADY_MEMBER_OF_PARENT",
          "STATUS_ADDED_AND_REMOVED_FROM_CHILDREN"
        ],
        "default": "UNKNOWN",
        "description": "- UNKNOWN: Status unknown\n - ADDED: Folder was successfully associated to the user\n - DUPLICATE: Folder has already been associated to the user\n - FAILED: Failed to associate folder to the user\n - STATUS_ALREADY_MEMBER_OF_PARENT: Not added to folder, because user is already a member of a parent folder\n - STATUS_ADDED_AND_REMOVED_FROM_CHILDREN: User was added, and removed from this folders child folders",
        "title": "Resulting status values after associating a folder and user"
      },
      "s12.directory.v1.AddUsersAssociationResponse": {
        "type": "object",
        "properties": {
          "user_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.directory.v1.AddUsersAssociationResponse.Status"
            },
            "title": "Map of users ids with their resulting status after associating with\nthe requested folder. This map is populated with the list of users\npassed in through the `AddUsersAssociationRequest`\nFor example: <Key,Value> -> <5441fffcde344415bb7ccaceda27e196,\nUserStatus>"
          },
          "revoked_user_memberships": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.directory.v1.AddUsersAssociationResponse.FolderIds"
            },
            "description": "Map of user ids with an array of folder_ids that they have lost direct\nmembership to. Being a member of a parent folder is the same as being a\nmember of the child, so we remove this association."
          }
        },
        "description": "Result returned from `AddUsersAssociationResponse`",
        "title": "AddUsersAssociationResponse"
      },
      "s12.directory.v1.AddUsersAssociationResponse.FolderIds": {
        "type": "object",
        "properties": {
          "folder_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "s12.directory.v1.AddUsersAssociationResponse.Status": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "ADDED",
          "DUPLICATE",
          "STATUS_MEMBER_OF_PARENT",
          "STATUS_ADDED_AND_REMOVED_FROM_CHILDREN"
        ],
        "default": "UNKNOWN",
        "description": "- UNKNOWN: Status unknown for user\n - ADDED: User was successfully associated to the folder\n - DUPLICATE: User has already been associated to the folder\n - STATUS_MEMBER_OF_PARENT: User is already a member of a parent folder\n - STATUS_ADDED_AND_REMOVED_FROM_CHILDREN: User was successfully associated to the folder, and removed from children\nfolders",
        "title": "Resulting status values after associating a user to a folder"
      },
      "s12.directory.v1.CreateFolderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Required. Non-empty folder name. Limited to maximum 250 characters.",
            "required": [
              "name"
            ]
          },
          "parent_id": {
            "type": "string",
            "title": "Optional. Parent folder UUID. If unspecified, will be created as a root\nfolder"
          },
          "id": {
            "type": "string",
            "description": "Optional. Folder UUID. If unspecified, backend will generate the ID."
          },
          "meta_label": {
            "type": "string",
            "description": "Optional. Folder meta label. If unspecified, backend will assign an empty\nstring meta label. Limited to maximum 250 characters."
          },
          "domain": {
            "type": "string",
            "title": "domain represents the type/domain/hierarchy for the folder. This is used\nfor getting folders of a certain domain, i.e. getting all `template`\nfolders or `site` folders"
          }
        },
        "description": "The parameters for `CreateFolderRequest`",
        "title": "CreateFolderRequest",
        "required": [
          "name"
        ]
      },
      "s12.directory.v1.CreateFolderResponse": {
        "type": "object",
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/s12.directory.v1.Folder"
          }
        },
        "description": "Result returned from `CreateFolderRequest`",
        "title": "CreateFolderResponse"
      },
      "s12.directory.v1.DeleteFoldersResponse": {
        "type": "object",
        "properties": {
          "folder_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of deleted folderIDs"
          }
        },
        "description": "Result returned from `DeleteFoldersResponse`",
        "title": "DeleteFoldersResponse"
      },
      "s12.directory.v1.Folder": {
        "type": "object",
        "example": {
          "id": "4fb56fa8-fa23-4a9c-907e-8367abc75a2f",
          "name": "Sydney",
          "org_id": "d31e24be-e7a4-4a28-a230-044f850041fc",
          "creator_id": "a3452937-9fa7-4ba2-9ffa-c3bbee3fc947",
          "created_at": "2020-04-28T04:14:31:00Z",
          "modified_at": "2020-04-28T04:14:31:00Z",
          "meta_label": "location"
        },
        "properties": {
          "id": {
            "type": "string",
            "title": "An unique identifier for the folder. Must be a valid UUID.\nFor example: '00001d65-d336-485a-8331-7b53f37e8f51'"
          },
          "name": {
            "type": "string",
            "title": "Name associated with folder"
          },
          "org_id": {
            "type": "string",
            "title": "The organisation that the folder belongs to"
          },
          "creator_id": {
            "type": "string",
            "title": "The user id responsible for creating the folder\nFor example: 'user_5441fffcde344415bb7ccaceda27e196'"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "The creation timestamp of the folder (Date, Time, Timezone)\nFor example: '2020-04-28T04:14:31:00Z'"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "The timestamp of the last modification for the folder (Date, Time,\nTimezone) For example: '2020-04-28T04:14:00Z'"
          },
          "meta_label": {
            "type": "string",
            "title": "Additional meta information that can be associated with the folder\ne.g. 'location'"
          },
          "members_count": {
            "type": "integer",
            "format": "int32",
            "description": "Members count are the count of active users associated with the folder."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether a folder has been marked as deleted or not."
          }
        },
        "description": "Folder represents the main directory object",
        "title": "Folder"
      },
      "s12.directory.v1.FolderList": {
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.directory.v1.Folder"
            },
            "title": "The list of folders in the message"
          }
        },
        "description": "FolderList represents an array of folders",
        "title": "FolderList"
      },
      "s12.directory.v1.FolderWithAncestors": {
        "type": "object",
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/s12.directory.v1.Folder"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.directory.v1.Folder"
            },
            "title": "The folders ancestors. For example, when returning a `location` leaf node,\nthe ancestors will be the [`area`,`region`] folders, when applicable"
          },
          "members_count": {
            "type": "integer",
            "format": "int32",
            "description": "Members count are the count of active users associated with the folder."
          },
          "has_children": {
            "type": "boolean",
            "title": "Whether the folder has children or not"
          }
        },
        "description": "FolderWithAncestors represents a a folder with an array of ancestor folders",
        "title": "FolderWithAncestors"
      },
      "s12.directory.v1.GetAllUsersByFolderResponse": {
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "The list of user_ids that have explict and inherited access to the\nrequested folder"
          }
        },
        "description": "Result returned from `GetAllUsersByFolderResponse`",
        "title": "GetAllUsersByFolderResponse"
      },
      "s12.directory.v1.GetFolderIDsForUserResponse": {
        "type": "object",
        "properties": {
          "folder_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "List of folder IDs the user has access to.\nFor example: '5441fffcde344415bb7ccaceda27e196'"
          }
        },
        "description": "Result returned from `GetFolderIDsForUserResponse`",
        "title": "GetFolderIDsForUserResponse"
      },
      "s12.directory.v1.GetFolderResponse": {
        "type": "object",
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/s12.directory.v1.Folder"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.directory.v1.Folder"
            },
            "title": "When with_ancestors is true, an array of the folders ancestors will be\nreturned. The array will be ordered, closest ancestor to furthest"
          },
          "all_children_count": {
            "type": "integer",
            "format": "int32",
            "title": "The total count of children underneath the folder. I\nIncluding children of children recursively"
          },
          "member_count": {
            "type": "integer",
            "format": "int32",
            "title": "The number of directly assigned users"
          },
          "deleted": {
            "type": "boolean",
            "title": "Whether the folder is deleted or not"
          }
        },
        "description": "Result returned from `GetFolderResponse`",
        "title": "GetFolderResponse"
      },
      "s12.directory.v1.GetFoldersResponse": {
        "type": "object",
        "properties": {
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.directory.v1.Folder"
            },
            "description": "The list of folders belonging to the organisation specified in the request."
          },
          "next_page_token": {
            "type": "string",
            "description": "Optional. base64 encoded. If this field is present, the value should be\nused in subsequent calls to GetFolders to get the next page of results.\nOtherwise, no further calls should be made."
          },
          "folders_with_ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.directory.v1.FolderWithAncestors"
            },
            "title": "When with_ancestors is true, folders with ancestors will be returned\ninstead of an array of folders"
          },
          "folders_enabled": {
            "type": "boolean",
            "description": "Whether or not the org settings setting is enabled."
          }
        },
        "description": "Result returned from `GetFoldersResponse`",
        "title": "GetFoldersResponse"
      },
      "s12.directory.v1.GetInheritedUsersByFolderResponse": {
        "type": "object",
        "properties": {
          "user_folders": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.directory.v1.FolderList"
            },
            "title": "Map of users (keys) with their ancestor folder assignments (values). This\nmap is populated with the list of users that have inherited access to the\nspecified folder. In addition, the list of folders per user is ordered from\nhighest to lowest ancestor. For example: <Key,Value> -> //\n<user_5441fffcde344415bb7ccaceda27e196, [List of folders]>"
          }
        },
        "description": "Result returned from `GetInheritedUsersByFolderResponse`",
        "title": "GetInheritedUsersByFolderResponse"
      },
      "s12.directory.v1.GetUsersByFolderResponse": {
        "type": "object",
        "properties": {
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "The list of user IDs that have explict access to the specified folder"
          }
        },
        "description": "Result returned from `GetUsersByFolderResponse`",
        "title": "GetUsersByFolderResponse"
      },
      "s12.directory.v1.RemoveFoldersAssociationResponse": {
        "type": "object",
        "properties": {
          "folder_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.directory.v1.RemoveFoldersAssociationResponse.Status"
            },
            "title": "Map of folders ids with their resulting status after removing the user\naccess to that folder. This map is populated with the list of folders\npassed in through the `RemoveFoldersAssociation`\nFor example: <Key,Value> -> <5441fffcde344415bb7ccaceda27e196,\nStatus>"
          }
        },
        "description": "Result returned from `RemoveFoldersAssociationResponse`",
        "title": "RemoveFoldersAssociationResponse"
      },
      "s12.directory.v1.RemoveFoldersAssociationResponse.Status": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "REMOVED",
          "NOT_FOUND"
        ],
        "default": "UNKNOWN",
        "description": "- UNKNOWN: Status unknown\n - REMOVED: Folder was successfully removed from the user\n - NOT_FOUND: Folder user association was not found",
        "title": "Resulting status values after removing a folder from a user"
      },
      "s12.directory.v1.RemoveUsersAssociationResponse": {
        "type": "object",
        "properties": {
          "user_status": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.directory.v1.RemoveUsersAssociationResponse.Status"
            },
            "title": "Map of users ids with their resulting status after removing access\nto the requested folder. This map is populated with the list of users\npassed in through the `RemoveUsersAssociation`\nFor example: <Key,Value> -> <5441fffcde344415bb7ccaceda27e196,\nStatus>"
          }
        },
        "description": "Result returned from `RemoveUsersAssociationResponse`",
        "title": "RemoveUsersAssociationResponse"
      },
      "s12.directory.v1.RemoveUsersAssociationResponse.Status": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "REMOVED",
          "NOT_FOUND"
        ],
        "default": "UNKNOWN",
        "description": "- UNKNOWN: Status unknown for user\n - REMOVED: User was successfully removed from the folder\n - NOT_FOUND: User folder association was not found",
        "title": "Resulting status values after removing a user from a folder"
      },
      "s12.directory.v1.UpdateFolderPropertiesRequest.FolderName": {
        "type": "object",
        "properties": {
          "val": {
            "type": "string"
          }
        }
      },
      "s12.directory.v1.UpdateFolderPropertiesResponse": {
        "type": "object",
        "properties": {
          "folder": {
            "$ref": "#/components/schemas/s12.directory.v1.Folder"
          }
        },
        "description": "Result returned from `UpdateFolderPropertiesResponse`",
        "title": "UpdateFolderPropertiesResponse"
      },
      "s12.inspections.v1.CloneInspectionRequest": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "title": "Required. Inspection ID to copy from"
          },
          "title": {
            "type": "string",
            "title": "Optional. The title for the newly duplicated inspection"
          }
        },
        "title": "The parameter body to `CloneInspection`"
      },
      "s12.inspections.v1.CloneInspectionResponse": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "title": "Inspection ID of the newly cloned inspection"
          }
        },
        "title": "Result returned from `CloneInspection`"
      },
      "s12.reports.v1.Filter": {
        "type": "object",
        "properties": {
          "show_actions": {
            "type": "boolean",
            "title": "Show/hide actions from the inspection report"
          },
          "show_failed_items": {
            "type": "boolean",
            "title": "Show/hide failed items"
          },
          "show_scores": {
            "type": "boolean",
            "title": "Show/hide all scoring"
          },
          "show_inspection": {
            "type": "boolean",
            "title": "Show/hide the inspection result"
          },
          "show_instructions": {
            "type": "boolean",
            "title": "Show/hide information/instruction fields"
          },
          "show_unanswered": {
            "type": "boolean",
            "title": "Show/hide unanswered questions"
          },
          "show_toc": {
            "type": "boolean",
            "title": "Show/hide table of content in exported file"
          },
          "show_high_quality_photo": {
            "type": "boolean",
            "title": "Show high/normal quality photo in exported file\n@deprecated: use media_layout on the upper level instead"
          },
          "show_disclaimer": {
            "type": "boolean",
            "title": "Show/hide the report disclaimer"
          },
          "show_media_summary": {
            "type": "boolean",
            "title": "Show media summary at the end of the report"
          },
          "show_footer": {
            "type": "boolean",
            "title": "Show/hide footer"
          },
          "show_footer_inspection_title": {
            "type": "boolean",
            "title": "Show/hide just the inspection title in footer"
          },
          "show_footer_custom_text": {
            "type": "boolean",
            "title": "Show/hide just the custom text in footer"
          },
          "enable_pdf_private_link": {
            "type": "boolean",
            "title": "Toggle the private pdf link feature"
          },
          "show_page_break": {
            "type": "boolean",
            "title": "Show/hide page breaks for each section"
          },
          "hide_failed_items_in_summary": {
            "type": "boolean",
            "title": "Show/hide failed items in report summary"
          },
          "hide_actions_in_summary": {
            "type": "boolean",
            "title": "Show/hide actions in report summary"
          },
          "hide_checked_questions": {
            "type": "boolean",
            "title": "Show/hide checked questions in report summary"
          },
          "hide_unchecked_questions": {
            "type": "boolean",
            "title": "Show/hide unchecked questions in report summary"
          }
        },
        "title": "Filter show/hide a certain part of the web report"
      },
      "s12.reports.v1.MediaLayout": {
        "type": "object",
        "properties": {
          "size": {
            "$ref": "#/components/schemas/s12.reports.v1.MediaSize"
          },
          "resolution": {
            "$ref": "#/components/schemas/s12.reports.v1.MediaResolution"
          }
        },
        "title": "Defines the layout of the media elements in the report appendix"
      },
      "s12.reports.v1.MediaResolution": {
        "type": "string",
        "enum": [
          "MEDIA_RESOLUTION_UNSPECIFIED",
          "MEDIA_RESOLUTION_LOW",
          "MEDIA_RESOLUTION_HIGH"
        ],
        "default": "MEDIA_RESOLUTION_UNSPECIFIED",
        "description": "- MEDIA_RESOLUTION_LOW: Render images in low resolution (smaller file size)\n - MEDIA_RESOLUTION_HIGH: Render images in high resolution (larger file size)",
        "title": "Desired quality of media in the appendix"
      },
      "s12.reports.v1.MediaSize": {
        "type": "string",
        "enum": [
          "MEDIA_SIZE_UNSPECIFIED",
          "MEDIA_SIZE_SMALL",
          "MEDIA_SIZE_MEDIUM",
          "MEDIA_SIZE_LARGE"
        ],
        "default": "MEDIA_SIZE_UNSPECIFIED",
        "description": "- MEDIA_SIZE_SMALL: ~4 images per page\n - MEDIA_SIZE_MEDIUM: ~2 images per page\n - MEDIA_SIZE_LARGE: ~1 image per page",
        "title": "Desired size of media in the appendix"
      },
      "s12.reports.v1.StartInspectionExportRequest": {
        "type": "object",
        "properties": {
          "export_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportRequest.ExportData"
            },
            "title": "List of report configurations"
          },
          "type": {
            "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportRequest.DocumentType"
          },
          "timezone": {
            "type": "string",
            "title": "Sets the timezone for bulk exporting file name"
          },
          "regenerate": {
            "type": "boolean",
            "description": "Indicate whether to by pass any caching and regenerate the report from the\nlastest data. This flag would only take effect for authorized user."
          }
        },
        "title": "StartExportRequest represents the parameters to `StartExport`"
      },
      "s12.reports.v1.StartInspectionExportRequest.DocumentType": {
        "type": "string",
        "enum": [
          "DOCUMENT_TYPE_UNSPECIFIED",
          "DOCUMENT_TYPE_PDF",
          "DOCUMENT_TYPE_WORD"
        ],
        "default": "DOCUMENT_TYPE_UNSPECIFIED",
        "title": "- DOCUMENT_TYPE_PDF: export document as PDF\n - DOCUMENT_TYPE_WORD: export document as MS Word"
      },
      "s12.reports.v1.StartInspectionExportRequest.ExportData": {
        "type": "object",
        "example": {
          "inspection_id": "9961f8ef-fa73-4e66-bd79-17138f83a5b8",
          "lang": "en-US",
          "preference_id": "5e3fe9e1-8b3f-41d2-8e2e-1b6172068bb2",
          "pages": [
            "3990d1f7-d9c0-48d8-8e3f-50ba6f164b0f",
            "45ecc281-0cbf-480d-a66a-a00aae195fd5"
          ],
          "media_layout": {
            "size": "MEDIA_SIZE_SMALL",
            "resolution": "MEDIA_RESOLUTION_LOW"
          }
        },
        "properties": {
          "inspection_id": {
            "type": "string",
            "title": "The ID of the inspection, this can be an s12ID or a UUID"
          },
          "lang": {
            "type": "string",
            "title": "Sets the language for the document using language code from ISO-639\nformat"
          },
          "preference_id": {
            "type": "string",
            "title": "Sets the requested preference"
          },
          "filters": {
            "$ref": "#/components/schemas/s12.reports.v1.Filter"
          },
          "pages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Sets the pages need to be hid for the generated document"
          },
          "media_layout": {
            "$ref": "#/components/schemas/s12.reports.v1.MediaLayout"
          }
        },
        "description": "Export data contains all export variant for a single inspection",
        "title": "StartInspectionExportRequest.ExportData",
        "externalDocs": {
          "url": "https://en.wikipedia.org/wiki/IETF_language_tag"
        }
      },
      "s12.reports.v1.StartInspectionExportResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "title": "The S3 bucket url for the generated export file, the url will only be\npopulated when the status is 'DONE'"
          },
          "status": {
            "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportResponse.Status"
          },
          "version": {
            "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportResponse.Version"
          },
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.reports.v1.StartInspectionExportResponse.Info"
            },
            "title": "Any additional info that feedback to the calling service"
          }
        },
        "title": "StartExportResponse represents the result of `StartExport`"
      },
      "s12.reports.v1.StartInspectionExportResponse.Info": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "title": "The code for a particular subject"
          },
          "details": {
            "type": "string",
            "title": "Any additional details for the particular subject"
          }
        }
      },
      "s12.reports.v1.StartInspectionExportResponse.Status": {
        "type": "string",
        "enum": [
          "STATUS_UNSPECIFIED",
          "STATUS_IN_PROGRESS",
          "STATUS_FAILED",
          "STATUS_DONE"
        ],
        "default": "STATUS_UNSPECIFIED"
      },
      "s12.reports.v1.StartInspectionExportResponse.Version": {
        "type": "string",
        "enum": [
          "VERSION_UNSPECIFIED",
          "VERSION_1",
          "VERSION_2",
          "VERSION_3"
        ],
        "default": "VERSION_UNSPECIFIED"
      },
      "s12.schedules.v1.CreateScheduleItemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "The id of the newly created schedule item"
          }
        },
        "description": "Result returned from `CreateScheduleItem`",
        "title": "CreateScheduleItemResponse"
      },
      "s12.schedules.v1.DeleteScheduleItemResponse": {
        "type": "object",
        "description": "Result returned from `DeleteScheduleItem`",
        "title": "DeleteScheduleItemResponse"
      },
      "s12.schedules.v1.ListScheduleItemsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem"
            },
            "title": "A list of schedule items"
          },
          "next_page_token": {
            "type": "string",
            "title": "If there might be more results than those appearing in this response, then\n`next_page_token` is included. If empty then there are no more results.\nTo get the next set of results, call this\nmethod again using the value of `next_page_token` as `page_token`.\nFor Example: 'MzA='"
          }
        },
        "description": "Result returned from `ListScheduleItems`",
        "title": "ListScheduleItemsResponse"
      },
      "s12.schedules.v1.ScheduleItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "ID of the schedule item"
          },
          "description": {
            "type": "string",
            "title": "Description of the schedule item"
          },
          "must_complete": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.MustComplete"
          },
          "can_late_submit": {
            "type": "boolean",
            "title": "Can the inspections be started after the due date"
          },
          "recurrence": {
            "type": "string",
            "description": "[RRule](https://www.textmagic.com/free-tools/rrule-generator) formatted\nrecurrence string. <br> Example: `FREQ=WEEKLY;BYDAY=MO;INTERVAL=1`\nrepresents weekly on Monday."
          },
          "start_time": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.StartTime"
          },
          "duration": {
            "type": "string",
            "description": "ISO8601 duration string, e.g. PT1H. How long inspection can be started\nafter the start_date."
          },
          "timezone": {
            "type": "string",
            "title": "Timezone the schedule item will appear in"
          },
          "from_date": {
            "type": "string",
            "format": "date-time",
            "title": "When this schedule will begin appearing"
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "title": "When the schedule will end"
          },
          "reminders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Reminder"
            },
            "title": "Reminders that will be sent to assignees"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "When the schdule item was last modified"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "When the schdule item was created"
          },
          "status": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Status"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Entity"
            },
            "title": "The users or groups that are assigned to complete the schedule"
          },
          "creator": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Entity"
          },
          "document": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Document"
          },
          "location_id": {
            "type": "string",
            "title": "The location assigned to this schedule item"
          },
          "next_occurrence": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.NextOccurrence"
          }
        },
        "description": "ScheduleItem represents a the rule for a reoccuring schedule event",
        "title": "ScheduleItem"
      },
      "s12.schedules.v1.ScheduleItem.Document": {
        "type": "object",
        "example": {
          "id": "0e7cff72-f919-4c84-aa37-e847b306423e",
          "type": "TEMPLATE",
          "name": "Joe's JSA Template"
        },
        "properties": {
          "id": {
            "type": "string",
            "title": "The unique identifier for the document",
            "required": [
              "id"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.DocumentType"
          },
          "name": {
            "type": "string",
            "title": "The name of the document",
            "readOnly": true
          }
        },
        "description": "Document represents the document in a schedule",
        "title": "ScheduleItem.Document",
        "required": [
          "id"
        ]
      },
      "s12.schedules.v1.ScheduleItem.DocumentType": {
        "type": "string",
        "enum": [
          "DOCUMENT_TYPE_UNSPECIFIED",
          "TEMPLATE"
        ],
        "default": "DOCUMENT_TYPE_UNSPECIFIED",
        "description": "- DOCUMENT_TYPE_UNSPECIFIED: Unspecified document type\n - TEMPLATE: Inspection Template",
        "title": "DocumentType is the type of document (e.g. template)"
      },
      "s12.schedules.v1.ScheduleItem.Entity": {
        "type": "object",
        "example": {
          "id": "0e7cff72-f919-4c84-aa37-e847b306423e",
          "type": "USER",
          "name": "Joe Bloggs"
        },
        "properties": {
          "id": {
            "type": "string",
            "title": "The unique identifier for the entity",
            "required": [
              "id"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.EntityType"
          },
          "name": {
            "type": "string",
            "title": "The name of the entity",
            "readOnly": true
          }
        },
        "description": "Entity represent the entity in a schedule, either creator or assignee",
        "title": "ScheduleItem.Entity",
        "required": [
          "id"
        ]
      },
      "s12.schedules.v1.ScheduleItem.EntityType": {
        "type": "string",
        "enum": [
          "ENTITY_TYPE_UNSPECIFIED",
          "USER",
          "ROLE"
        ],
        "default": "ENTITY_TYPE_UNSPECIFIED",
        "description": "- ENTITY_TYPE_UNSPECIFIED: Unspecified entity type\n - USER: User\n - ROLE: Role",
        "title": "EntityType is the type of entity, either a user or a role"
      },
      "s12.schedules.v1.ScheduleItem.MustComplete": {
        "type": "string",
        "enum": [
          "MUST_COMPLETE_UNSPECIFIED",
          "ONE",
          "ALL"
        ],
        "default": "MUST_COMPLETE_UNSPECIFIED",
        "description": "- MUST_COMPLETE_UNSPECIFIED: Unspecified must complete value\n - ONE: Schedule must be completed by one assignee\n - ALL: Schedule must be completed by all assignees",
        "title": "MustComplete is whom must complete a given schedule, either one assignee or\nall assignees"
      },
      "s12.schedules.v1.ScheduleItem.NextOccurrence": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "title": "The ISO8601 timestamp when the next occurrence will occur"
          },
          "due": {
            "type": "string",
            "format": "date-time",
            "title": "The ISO8601 timestamp when the next occurrence is due by"
          }
        },
        "description": "NextOccurrence is the next time the schedule item will occur for assignees",
        "title": "ScheduleItem.NextOccurrence"
      },
      "s12.schedules.v1.ScheduleItem.Reminder": {
        "type": "object",
        "example": {
          "event": "START",
          "duration": "PT5M"
        },
        "properties": {
          "event": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.ReminderEventType"
          },
          "duration": {
            "type": "string",
            "description": "ISO8601 duration string, e.g. PT1H. How long before the event to remind\nthe assignees.",
            "required": [
              "duration"
            ]
          }
        },
        "description": "Reminder represents a reminder for a schedule item",
        "title": "ScheduleItem.Reminder",
        "required": [
          "duration"
        ]
      },
      "s12.schedules.v1.ScheduleItem.ReminderEventType": {
        "type": "string",
        "enum": [
          "REMINDER_EVENT_TYPE_UNSPECIFIED",
          "START",
          "DUE"
        ],
        "default": "REMINDER_EVENT_TYPE_UNSPECIFIED",
        "description": "- REMINDER_EVENT_TYPE_UNSPECIFIED: Unspecified reminder event type\n - START: Default value - start of the schedule\n - DUE: End of the schedule",
        "title": "ReminderEventType is the type of reminder event"
      },
      "s12.schedules.v1.ScheduleItem.StartTime": {
        "type": "object",
        "example": {
          "hour": 15,
          "minute": 56
        },
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32",
            "title": "The hour of the day to start the schedule",
            "required": [
              "hour"
            ]
          },
          "minute": {
            "type": "integer",
            "format": "int32",
            "title": "The minute of the day to start the schedule",
            "required": [
              "minute"
            ]
          }
        },
        "description": "StartTime represents the start time of a schedule item",
        "title": "ScheduleItem.StartTime",
        "required": [
          "hour",
          "minute"
        ]
      },
      "s12.schedules.v1.ScheduleItem.Status": {
        "type": "string",
        "enum": [
          "STATUS_UNSPECIFIED",
          "ACTIVE",
          "PAUSED",
          "NO_TEMPLATE",
          "NO_ASSIGNEE",
          "FINISHED"
        ],
        "default": "STATUS_UNSPECIFIED",
        "description": "- STATUS_UNSPECIFIED: Unspecified status value\n - ACTIVE: Default value - schedule item is still active\n - PAUSED: Schedule has been paused e.g. manually paused/org frozen\n - NO_TEMPLATE: The template used for this schedule item has been deleted/archived\n - NO_ASSIGNEE: No valid assignees exist for this schedule item anymore\n - FINISHED: The schedule item has hit its end date or count limit and is now complete",
        "title": "Status is the current status of the schedule item"
      },
      "s12.schedules.v1.UpdateScheduleItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "title": "Description of the schedule item",
            "required": [
              "description"
            ]
          },
          "must_complete": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.MustComplete"
          },
          "can_late_submit": {
            "type": "boolean",
            "title": "Can the inspections be started after the due date",
            "required": [
              "can_late_submit"
            ]
          },
          "recurrence": {
            "type": "string",
            "description": "[RRule](https://www.textmagic.com/free-tools/rrule-generator) formatted\nrecurrence string. <br> Example: `FREQ=WEEKLY;BYDAY=MO;INTERVAL=1`\nrepresents weekly on Monday.",
            "required": [
              "recurrence"
            ]
          },
          "start_time": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.StartTime"
          },
          "duration": {
            "type": "string",
            "description": "ISO8601 duration string, e.g. PT1H. How long inspection can be started\nafter the start_date.",
            "required": [
              "duration"
            ]
          },
          "timezone": {
            "type": "string",
            "title": "Timezone the schedule item will appear in",
            "required": [
              "timezone"
            ]
          },
          "from_date": {
            "type": "string",
            "format": "date-time",
            "title": "When this schedule will begin appearing",
            "required": [
              "from_date"
            ]
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "title": "When the schedule will end"
          },
          "reminders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Reminder"
            },
            "title": "Reminders that will be sent to assignees"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Entity"
            },
            "title": "The users or groups that are assigned to complete the schedule",
            "required": [
              "assignees"
            ]
          },
          "document": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Document"
          },
          "location_id": {
            "type": "string",
            "title": "The location assigned to this schedule item"
          },
          "id": {
            "type": "string",
            "readOnly": true
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Status"
          },
          "creator": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.Entity"
          },
          "next_occurrence": {
            "$ref": "#/components/schemas/s12.schedules.v1.ScheduleItem.NextOccurrence"
          }
        },
        "description": "The parameters for creating or updating a schedule item",
        "title": "UpdateScheduleItem",
        "required": [
          "description",
          "can_late_submit",
          "recurrence",
          "duration",
          "timezone",
          "from_date",
          "assignees"
        ]
      },
      "s12.schedules.v1.UpdateScheduleItemResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "The identifier of the updated schedule item"
          }
        },
        "description": "Result returned from `UpdateScheduleItem`",
        "title": "UpdateScheduleItemResponse"
      },
      "s12.tasks.v1.Action": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task"
          }
        },
        "title": "Action represents a stand-alone action that has been created"
      },
      "s12.tasks.v1.ActionResponse": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/s12.tasks.v1.Action"
          }
        },
        "title": "ActionResponse represents the result of `GetAction`"
      },
      "s12.tasks.v1.ActionsResponse": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Action"
            },
            "title": "List of Actions"
          },
          "next_page_token": {
            "type": "string",
            "title": "If there might be more results than those appearing in this response, then\n`next_page_token` is included. If empty then there are no more results.\nTo get the next set of results, call this\nmethod again using the value of `next_page_token` as `page_token`.\nFor Example: 'ODFBMzQ3MDYtNzQxNy00RDZGLThDNjE1MEFDMkM4MTQ3NDQ='"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "title": "Total number of actions found"
          }
        },
        "title": "ActionsResponse represents the result of `GetActions`"
      },
      "s12.tasks.v1.AddCommentRequest": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Required. The UUID for the task the comment is being added to."
          },
          "comment": {
            "type": "string",
            "description": "Required. The content of the comment."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optional. Date/time this comment was added."
          },
          "event_id": {
            "type": "string",
            "description": "Optional. The unique identifier for the event. This will be auto-generated\nif omitted."
          }
        },
        "title": "Represents the parameters to `AddComment`"
      },
      "s12.tasks.v1.AlertEventLevel": {
        "type": "string",
        "enum": [
          "UNKNOWN_LEVEL",
          "OK",
          "INFO",
          "WARN",
          "CRITICAL"
        ],
        "default": "UNKNOWN_LEVEL",
        "description": "- UNKNOWN_LEVEL: `UNKNOWN` indicates null value\n - OK: `OK` level indicates that device metric became healthy\n - INFO: `INFO` level indicates that the first alert event sent\n - WARN: `WARN` level indicates that the second alert event sent\n - CRITICAL: `CRITICAL` level indicates that the third alert event sent",
        "title": "Alert event level represents a level of importance of the alert event"
      },
      "s12.tasks.v1.Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of a category."
          },
          "key": {
            "type": "string",
            "description": "The name of a category. This can be a default name or one that is\ncustomized in your organization."
          },
          "label": {
            "type": "string",
            "description": "The name of a category. This field's value is the same as the value for\n`key`."
          },
          "description": {
            "type": "string",
            "description": "The description of a category. This is unused, and is hardcoded to an empty\nstring, `\"\"`."
          },
          "display_order": {
            "type": "integer",
            "format": "int32",
            "description": "The sorting order of a list of categories. This is unused, and is hardcoded\nas `0`."
          },
          "is_visible": {
            "type": "boolean",
            "description": "The indicator for whether a category is visible or not for an organization\non the web app and the mobile app."
          },
          "use_category_access_whitelist": {
            "type": "boolean",
            "description": "The indicator for whether a category's issues can be accessed by anyone\nin your organization or not. If this is `false` for a category, then that\ncategory's issues can only be accessed by creators and assignees."
          }
        },
        "description": "A category is used to classify an issue.\nFor example, you can filter issues by category for analytics, or give\nusers or groups access to issues from a category."
      },
      "s12.tasks.v1.CollaboratorRole": {
        "type": "string",
        "enum": [
          "COLLABORATOR_ROLE_NOT_SET",
          "ASSIGNEE",
          "CREATOR"
        ],
        "default": "COLLABORATOR_ROLE_NOT_SET",
        "description": "- COLLABORATOR_ROLE_NOT_SET: The default value for when a collaborator role is not set.\n - ASSIGNEE: The collaborator has been assigned to a task.\n - CREATOR: The collaborator has created the task.",
        "title": "The role of the collaborator in relation to a task"
      },
      "s12.tasks.v1.CollaboratorType": {
        "type": "string",
        "enum": [
          "COLLABORATOR_TYPE_NOT_SET",
          "USER",
          "GROUP",
          "EXTERNAL_USER",
          "CONTRIBUTOR"
        ],
        "default": "COLLABORATOR_TYPE_NOT_SET",
        "description": "- COLLABORATOR_TYPE_NOT_SET: The default value for when the collaborator type is not set.\n - USER: The collaborator is an internal user.\n - GROUP: The collaborator is a group.\n - EXTERNAL_USER: The collaborator is an external user.\nThis happens when a task is assigned to an email address.\n - CONTRIBUTOR: The collaborator is a contributor.\nA contributor is an individual who raises a task anonymously. For example,\ncreating an incident through the incident QR code functionality.",
        "title": "The type of the collaborator"
      },
      "s12.tasks.v1.CreateActionRequest": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Optional. The unique identifier of the action\nIf not provided, UUID will be generated server side"
          },
          "title": {
            "type": "string",
            "title": "Required. Title of the action\nTitle is limited to only 255 characters max"
          },
          "description": {
            "type": "string",
            "title": "Optional. Description of the action (maximum 500 characters)"
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
            },
            "title": "The collaborators involved into this action"
          },
          "priority_id": {
            "type": "string",
            "title": "Optional. ID of the action's priority\nIf not set, this action will be stored with the default priority(none)"
          },
          "status_id": {
            "type": "string",
            "title": "Optional. ID of the action's status\nIf not set, this action will be stored with the default status(to do)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Optional. Date and time this action was created"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Optional. Date/time this action is due"
          },
          "inspection_id": {
            "type": "string",
            "description": "Optional. ID of the inspection the action belongs to\nIf not set, this action is a standalone action and the inspection ID will\nbe null."
          },
          "inspection_item_id": {
            "type": "string",
            "title": "Optional. ID of the item in the inspection associated with the action"
          },
          "template_id": {
            "type": "string",
            "description": "Optional. If a template ID is provided then an inspection ID must be\nprovided. If not set, this action is a standalone action and the template\nID will be null."
          },
          "site_id": {
            "type": "string",
            "title": "Optional. ID of the Site associated with the action"
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Reference"
            },
            "description": "Optional. Array of references attached to this action."
          }
        },
        "title": "CreateActionRequest represents the parameters to `CreateAction`"
      },
      "s12.tasks.v1.CreateIncidentRequest": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "A UUID to identify the issue.\nOptional. If it is not provided, it will be automatically generated."
          },
          "title": {
            "type": "string",
            "description": "Required. Title of the issue (maximum 255 characters)."
          },
          "description": {
            "type": "string",
            "description": "Optional. Description of the issue (maximum 500 characters)."
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
            },
            "description": "The collaborators involved in this issue.\nCollaborators are users who have been assigned to the issue. The user will\nappear in the \"Assignee\" field in the issue. Only one user can be assigned\nto an issue at a time."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optional. The date and time this issue was created.\nIf no date is provided, the current time will be used.\nMust be sent in RFC3339 format, more information about the type is\navailable here:\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#timestamp."
          },
          "category_id": {
            "type": "string",
            "description": "The ID of the issue's category.\nCategories are configured at an organization level, and can be retrieved\nfrom the `GetCategories` endpoint. The issue will not be created if the\ncategory is missing, and an error will be returned."
          },
          "status_id": {
            "type": "string",
            "description": "Optional. ID of the issue's status.\nIf not set, this issue will be stored with the default status (Open).\nAn issue can be open or resolved, and these are represented by hardcoded\nUUID values. Open status: `547ed646-5e34-4732-bb54-a199d304368a`. Resolved\nstatus: `450484b1-56cd-4784-9b49-a3cf97d0c0ad`."
          },
          "site_id": {
            "type": "string",
            "description": "The ID of the site associated with the issue.\nSite IDs can be retrieved on platform."
          },
          "location": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.AddressLocation"
          }
        },
        "title": "CreateIncidentRequest represents the parameters to `CreateIncident`"
      },
      "s12.tasks.v1.DeleteActionsRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "The list of action ids to be deleted"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optional. The UTC time and date the deletion took place."
          }
        },
        "title": "DeleteActionsRequest represents the list of action ids to delete"
      },
      "s12.tasks.v1.DeleteIncidentsRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of issue UUIDs to be deleted."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Optional. The UTC time and date the deletion took place."
          }
        },
        "description": "DeleteIncidentsRequest represents the list of issue UUIDs to delete."
      },
      "s12.tasks.v1.GenerateResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The shareable link pointing to the issue's public web report."
          }
        },
        "title": "GenerateReponse represents the result of `GenerateWebReportSharedLink`"
      },
      "s12.tasks.v1.GetActionsRequest": {
        "type": "object",
        "properties": {
          "page_size": {
            "type": "integer",
            "format": "int32",
            "title": "Optional. Number of actions to be returned in a single request. Maximum\n100. Non-positive values are ignored. The presence of `next_page_token` in\nthe response indicates that more results might be available. For example:\n'20'"
          },
          "page_token": {
            "type": "string",
            "title": "Optional. If present, then retrieve the next batch of results from the\npreceding call to this method. `page_token` must be the value of\n`next_page_token` from the previous response.  The values of other method\nparameters should be identical to those in the previous call.\nFor example: 'ODFBMzQ3MDYtNzQxNy00RDZGLThDNjE1MEFDMkM4MTQ3NDQ='"
          },
          "inspection_id": {
            "type": "string",
            "description": "Optional. The ID of the inspection the action belongs to. Depricated,\ninspectionID in `filters` should be used instead."
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "description": "Optional. Offset from where on the actions will be listed."
          },
          "sort_field": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.SortField"
          },
          "sort_direction": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.SortDirection"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter"
            },
            "title": "Optional. Filters consists of an array of filter for listing actions"
          }
        },
        "title": "GetActionsRequest represents the parameters to `GetActions`"
      },
      "s12.tasks.v1.GetActionsRequest.Filter": {
        "type": "object",
        "properties": {
          "status_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.StatusID"
          },
          "priority_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.PriorityID"
          },
          "site_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.SiteID"
          },
          "assignee_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.AssigneeID"
          },
          "template_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.TemplateID"
          },
          "inspection_item_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.InspectionItemID"
          },
          "inspection_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.InspectionID"
          },
          "creator_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.CreatorID"
          },
          "modified_before": {
            "type": "string",
            "format": "date-time",
            "title": "optional, filters out anything modified after this date"
          },
          "modified_after": {
            "type": "string",
            "format": "date-time",
            "title": "optional, filters out anything modified before this date"
          },
          "reference": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Reference"
          },
          "created_at": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.Duration"
          },
          "modified_at": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.Duration"
          },
          "collaborators": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.Collaborator"
          },
          "due_at": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.Duration"
          },
          "title": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.Search"
          },
          "description": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.Search"
          }
        },
        "title": "Filters represents a filters object which contains the filters\nfor listing actions"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.AssigneeID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the assignee_id should be one of the value\nprovided"
          }
        },
        "title": "assignee id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.Collaborator": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
            },
            "title": "OR relation, represents the assignee_id should be one of the value\nprovided"
          }
        },
        "title": "assignee id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.CreatorID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the creator_id should be\none of the value provided"
          }
        },
        "title": "creator id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.Duration": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.TimeFrom"
          },
          "to": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.TimeTo"
          }
        },
        "title": "time duration filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_UNKNOWN",
          "EQ",
          "GTE",
          "GT",
          "LTE",
          "LT",
          "CONTAINS",
          "IN"
        ],
        "default": "FILTER_OPERATOR_UNKNOWN",
        "title": "- EQ: field value = given value\n - GTE: field value >= given value\n - GT: field value > given value\n - LTE: field value <= given value\n - LT: field value < given value\n - CONTAINS: field value contains given value\n - IN: field value in given values"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.InspectionID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the inspection_id should be\none of the value provided"
          }
        },
        "title": "inspection id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.InspectionItemID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the inspection_item_id should be\none of the value provided"
          }
        },
        "title": "inspection item id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.PriorityID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the priority_id should be one of the value\nprovided"
          }
        },
        "title": "priority id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.Search": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "`term` represents the text to search for."
          }
        },
        "title": "text search filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.SiteID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the site_id should be one of the value provided"
          }
        },
        "title": "site id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.StatusID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the status_id should be one of the value\nprovided"
          }
        },
        "title": "status id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.TemplateID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "OR relation, represents the template_id should be one of the value\nprovided"
          }
        },
        "title": "template id filter"
      },
      "s12.tasks.v1.GetActionsRequest.Filter.TimeFrom": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "string",
            "format": "date-time",
            "title": "represents the time should be\nafter the value provided"
          }
        }
      },
      "s12.tasks.v1.GetActionsRequest.Filter.TimeTo": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetActionsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "string",
            "format": "date-time",
            "title": "represents the time should be\nbefore the value provided"
          }
        }
      },
      "s12.tasks.v1.GetActionsRequest.SortDirection": {
        "type": "string",
        "enum": [
          "SORT_DIRECTION_UNKNOWN",
          "ASC",
          "DESC"
        ],
        "default": "SORT_DIRECTION_UNKNOWN"
      },
      "s12.tasks.v1.GetActionsRequest.SortField": {
        "type": "string",
        "enum": [
          "SORT_FIELD_UNKNOWN",
          "PRIORITY",
          "DATE_DUE",
          "CREATED_AT",
          "MODIFIED_AT"
        ],
        "default": "SORT_FIELD_UNKNOWN"
      },
      "s12.tasks.v1.GetCategoriesResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Category"
            },
            "title": "A list of the categories that are configured for the organisation"
          }
        },
        "description": "GetCategoriesResponse represents the response to a GetCategories request.\nIt is an array of `Category`, containing data about the organization's\ncategories."
      },
      "s12.tasks.v1.GetIncidentsRequest": {
        "type": "object",
        "properties": {
          "page_size": {
            "type": "integer",
            "format": "int32",
            "description": "Optional. Number of issues to be returned in a single request.\nThis must be a value between 1 and 100, any values outside of this range\nwill be ignored. The presence of `next_page_token` in the response\nindicates that more results might be available."
          },
          "page_token": {
            "type": "string",
            "title": "Optional. If present, then retrieve the next batch of results from the\npreceding call to this method. `page_token` must be the value of\n`next_page_token` from the previous response.  The values of other method\nparameters should be identical to those in the previous call.\nThis can be used to retrieve more than 100 issues with multiple API\ncalls. For example: 'ODFBMzQ3MDYtNzQxNy00RDZGLThDNjE1MEFDMkM4MTQ3NDQ='"
          },
          "sort_field": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.SortField"
          },
          "sort_direction": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.SortDirection"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter"
            },
            "description": "Optional. An array of filters can be provided in the request to filter the\nissues."
          }
        },
        "description": "GetIncidentsRequest represents the parameters to `GetIncidents`."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter": {
        "type": "object",
        "properties": {
          "status_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.StatusID"
          },
          "priority_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.PriorityID"
          },
          "category_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.CategoryID"
          },
          "site_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.SiteID"
          },
          "assignee_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.AssigneeID"
          },
          "creator_id": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.CreatorID"
          },
          "title": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.Search"
          },
          "description": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.Search"
          }
        },
        "description": "Filters represents a filters object which contains the filters available\nwhen listing issues. You can provide an array of filters in the request\nto get a more specific response. Each filter can have an `operator` and a\n`value`. The `operators` are described in `FilterOperator`, and the `value`\nwill be a UUID associated with that filter type."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.AssigneeID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The user ID of the assignee."
          }
        },
        "description": "Will return issues where the user ID of the assignee matches the\nprovided value."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.CategoryID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the category."
          }
        },
        "description": "Will return issues that have a matching category."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.CreatorID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The user ID of the creator."
          }
        },
        "description": "Will return issues where the user ID of the creator matches the\nprovided value."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator": {
        "type": "string",
        "enum": [
          "FILTER_OPERATOR_UNKNOWN",
          "IN"
        ],
        "default": "FILTER_OPERATOR_UNKNOWN",
        "description": "The options available when defining a filter. The only available option\nis `IN`.\n\n - FILTER_OPERATOR_UNKNOWN: `FILTER_OPERATOR_UNKNOWN` represents the default value for a filter\noperator, which is `IN`.\n - IN: `IN` returns results where the value is a direct match."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.PriorityID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the priority."
          }
        },
        "description": "Will return issues that have a matching priority.\nThe priority of an issue can be one of four options: none, low, medium\nor high. Each of these are represented by a hardcoded UUID value.\nNo priority: `58941717-817f-4c7c-a6f6-5cd05e2bbfde`.\nLow priority: `16ba4717-adc9-4d48-bf7c-044cfe0d2727`.\nMedium priority: `ce87c58a-eeb2-4fde-9dc4-c6e85f1f4055`.\nHigh priority: `02eb40c1-4f46-40c5-be16-d32941c96ec9`."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.Search": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string",
            "description": "`term` represents the text to search for."
          }
        },
        "description": "Will return issues where the title and/or description contain the search\nterm."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.SiteID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the site."
          }
        },
        "description": "Will return issues that have a matching site."
      },
      "s12.tasks.v1.GetIncidentsRequest.Filter.StatusID": {
        "type": "object",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/s12.tasks.v1.GetIncidentsRequest.Filter.FilterOperator"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ID of the status."
          }
        },
        "description": "Will return issues that have a matching status.\nAn issue can be open or resolved, and these are represented by\nhardcoded UUID values.\nOpen status: `547ed646-5e34-4732-bb54-a199d304368a`.\nResolved status: `450484b1-56cd-4784-9b49-a3cf97d0c0ad`."
      },
      "s12.tasks.v1.GetIncidentsRequest.SortDirection": {
        "type": "string",
        "enum": [
          "SORT_DIRECTION_UNKNOWN",
          "ASC",
          "DESC"
        ],
        "default": "SORT_DIRECTION_UNKNOWN",
        "description": "The options available to define the sort direction.\n\n - SORT_DIRECTION_UNKNOWN: `SORT_DIRECTION_UNKNOWN` will return the default sort direction.\n - ASC: `ASC` will return the sorted issues in ascending order.\n - DESC: `DESC` will return the sorted issues in descending order."
      },
      "s12.tasks.v1.GetIncidentsRequest.SortField": {
        "type": "string",
        "enum": [
          "SORT_FIELD_UNKNOWN",
          "PRIORITY",
          "DATE_DUE",
          "CREATED_AT",
          "MODIFIED_AT"
        ],
        "default": "SORT_FIELD_UNKNOWN",
        "description": "The options available to sort the issues by.\nBy default, the issues will be returned by the date they were last\nmodified in descending order. This should be used in combination with\n`SortDirection` to determine how issues are sorted. If either\n`SortField` or `SortDirection` is missing, the default sort order will be\nused.\n\n - SORT_FIELD_UNKNOWN: `SORT_FIELD_UNKNOWN` will return the default sort order.\n - PRIORITY: `PRIORITY` will sort the issues by incident priority.\n - DATE_DUE: `DATE_DUE` will sort the issues by due date.\n - CREATED_AT: `CREATED_AT` will sort the issues by the date they were created.\n - MODIFIED_AT: `MODIFIED_AT` will sort the issues by the date they were last\nmodified."
      },
      "s12.tasks.v1.GetPDFReportResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "title": "The pdf report download link"
          }
        }
      },
      "s12.tasks.v1.GetTimelineRequest": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Required. The UUID of the task whose timeline will be retrieved."
          }
        },
        "title": "Represents the parameters to `GetTimeline`"
      },
      "s12.tasks.v1.GetTimelineResponse": {
        "type": "object",
        "properties": {
          "timeline_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem"
            },
            "description": "A list of items in the task timeline."
          }
        },
        "title": "Represents the result of `GetTimeline`"
      },
      "s12.tasks.v1.Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "title": "Group represents a user group configured within an organisation"
      },
      "s12.tasks.v1.Incident": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task"
          },
          "category_id": {
            "type": "string",
            "description": "@deprecated. Use category instead.\nThe category id associated with the issue."
          },
          "category": {
            "$ref": "#/components/schemas/s12.tasks.v1.Category"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.common.Media"
            },
            "description": "Any media associated with this issue."
          },
          "location": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.AddressLocation"
          },
          "inspections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Inspection"
            },
            "description": "The inspections that are linked to this issue."
          }
        },
        "description": "An Incident represents the details of an issue.\nThis can include the category, any attached media, the location,\nany linked inspections and the task associated with the issue."
      },
      "s12.tasks.v1.IncidentResponse": {
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/s12.tasks.v1.Incident"
          }
        },
        "title": "IncidentResponse represents the result of `GetIncident`"
      },
      "s12.tasks.v1.IncidentsResponse": {
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Incident"
            },
            "title": "List of issues"
          },
          "next_page_token": {
            "type": "string",
            "title": "If there are more results than those appearing in this response, then\n`next_page_token` is included. If empty then there are no more results.\nTo get the next set of results, call `GetIncidents`\nmethod again using the value of `next_page_token` as `page_token`.\nFor Example: 'ODFBMzQ3MDYtNzQxNy00RDZGLThDNjE1MEFDMkM4MTQ3NDQ='"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "title": "Total number of issues found"
          }
        },
        "title": "IncidentsResponse represents the result of `GetIncidents`"
      },
      "s12.tasks.v1.Inspection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the linked inspection. This may or may not be a UUID, so we don't\nvalidate it here."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the inspection was created."
          },
          "status": {
            "$ref": "#/components/schemas/s12.tasks.v1.Inspection.InspectionStatus"
          },
          "title": {
            "type": "string",
            "title": "The title of the inspection"
          },
          "template_title": {
            "type": "string",
            "title": "The title of the template that this inspection was created from"
          }
        },
        "title": "Inspection represents an inspection that is linked to an issue"
      },
      "s12.tasks.v1.Inspection.InspectionStatus": {
        "type": "string",
        "enum": [
          "INSPECTION_STATUS_UNSPECIFIED",
          "INSPECTION_STATUS_IN_PROGRESS",
          "INSPECTION_STATUS_COMPLETED",
          "INSPECTION_STATUS_DELETED"
        ],
        "default": "INSPECTION_STATUS_UNSPECIFIED",
        "description": "- INSPECTION_STATUS_UNSPECIFIED: The status of the inspection is unspecified\n - INSPECTION_STATUS_IN_PROGRESS: The status of the inspection is 'In Progress'\n - INSPECTION_STATUS_COMPLETED: The status of the inspection is 'Completed'\n - INSPECTION_STATUS_DELETED: The status of the inspection is 'Deleted'",
        "title": "The status of the linked inspection"
      },
      "s12.tasks.v1.MetricType": {
        "type": "string",
        "enum": [
          "UNKNOWN_TYPE",
          "TEMPERATURE",
          "HUMIDITY",
          "BATTERY",
          "SIGNAL",
          "AIR_QUALITY_PM25",
          "AIR_QUALITY_PM10",
          "TEMPERATURE_2",
          "DIFFERENTIAL_AIR_PRESSURE",
          "CO",
          "DOOR_OPEN_CLOSED",
          "BATTERY_VOLTAGE",
          "WEATHER",
          "WIND_SPEED",
          "WIND_DIRECTION",
          "WIND_GUST",
          "CO2"
        ],
        "default": "UNKNOWN_TYPE",
        "description": "- UNKNOWN_TYPE: `UNKNOWN` indicates null value\n - TEMPERATURE: Temperature metric\n - HUMIDITY: Humidity metric\n - BATTERY: Battery level. Percentage based i.e. 0 - 100\n - SIGNAL: Signal strength metric\n - AIR_QUALITY_PM25: Air quality for particulate matter less than 2.5 microns\n - AIR_QUALITY_PM10: Air quality for particulate matter less than 10 microns\n - TEMPERATURE_2: Alternative temperature (Some hardware i.e. Avem Quirks do have 2 probes\nand are sending 2 temperatures)\n - DIFFERENTIAL_AIR_PRESSURE: Differential air pressure\n - CO: Carbon monoxide\n - DOOR_OPEN_CLOSED: Door open/closed boolean metric\n - BATTERY_VOLTAGE: Battery voltage metric\n - WEATHER: Weather (e.g. sunny, thunderstorms)\n - WIND_SPEED: Wind speed\n - WIND_DIRECTION: Wind direction\n - WIND_GUST: Wind gust\n - CO2: Carbon dioxide",
        "title": "Metric type represents a type of received metric"
      },
      "s12.tasks.v1.ReferenceType": {
        "type": "string",
        "enum": [
          "REFERENCE_TYPE_NOT_SET",
          "SENSOR",
          "SENSOR_ALERT",
          "INSPECTION",
          "INCIDENT"
        ],
        "default": "REFERENCE_TYPE_NOT_SET",
        "description": "Reference type. The idea here is to list all the \"external\" types that would\nbe used as a reference when creating actions."
      },
      "s12.tasks.v1.Task": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "title": "An ID uniquely identifying this task message.\nFor example: 'aa70d8a6-af37-44f4-8768d8899fe274c5'"
          },
          "creator": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.User"
          },
          "title": {
            "type": "string",
            "title": "Title of this task"
          },
          "description": {
            "type": "string",
            "title": "Description of this task"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date/time this task was created"
          },
          "due_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date/time this task is due"
          },
          "priority_id": {
            "type": "string",
            "title": "Priority ID of this task"
          },
          "status_id": {
            "type": "string",
            "description": "Status ID of this task\n@deprecated. For task type of action use status instead.\nIn use by task type of incident."
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
            },
            "title": "Collaborators of this task"
          },
          "template_id": {
            "type": "string",
            "title": "Template ID of the inspection the action belongs to"
          },
          "inspection": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Inspection"
          },
          "inspection_item": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.InspectionItem"
          },
          "site": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Site"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date/time this task was last modified"
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Reference"
            },
            "description": "References on this task."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Date/time this task was completed at"
          },
          "template_name": {
            "type": "string",
            "title": "Template name of the inspection the action belongs to"
          },
          "status": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Status"
          }
        },
        "title": "Task represents a stand-alone task that has been created"
      },
      "s12.tasks.v1.Task.AddressAnswer": {
        "type": "object",
        "properties": {
          "location_text": {
            "type": "string",
            "title": "Location text"
          },
          "location": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.AddressLocation"
          }
        },
        "title": "Answer returned for AddressItem"
      },
      "s12.tasks.v1.Task.AddressLocation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task's location."
          },
          "thoroughfare": {
            "type": "string",
            "description": "The thoroughfare of the location."
          },
          "sub_thoroughfare": {
            "type": "string",
            "title": "The sub_thoroughfare of the location,"
          },
          "locality": {
            "type": "string",
            "title": "The locality of the location"
          },
          "sub_locality": {
            "type": "string",
            "title": "The sub_locality of the location"
          },
          "administrative_area": {
            "type": "string",
            "title": "The administrative_area of the location"
          },
          "sub_administrative_area": {
            "type": "string",
            "title": "The sub_administrative_area of the location"
          },
          "postal_code": {
            "type": "string",
            "title": "The postal_code of the location"
          },
          "country": {
            "type": "string",
            "title": "The country of the location"
          },
          "iso_country_code": {
            "type": "string",
            "title": "The iso_country_code of the location"
          },
          "geo_position": {
            "$ref": "#/components/schemas/s12.common.GeoPosition"
          }
        },
        "description": "The location of the task.\nThe latitude and longitude in the `geo_position` object are required.\nAll other fields are optional, but add extra context to the location on\nplatform."
      },
      "s12.tasks.v1.Task.Attachments": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "title": "Note inside Attachments of inspectionItem Answer"
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.common.Media"
            },
            "title": "images or pdf inside Attachments of inspectionItem Answer"
          }
        },
        "title": "Attachments of inspectionItem Answer"
      },
      "s12.tasks.v1.Task.CheckboxAnswer": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "boolean",
            "title": "answer content for CheckboxAnswer"
          }
        },
        "title": "Answer returned for CheckboxItem"
      },
      "s12.tasks.v1.Task.Collaborator": {
        "type": "object",
        "properties": {
          "collaborator_id": {
            "type": "string",
            "description": "A UUID uniquely identifying this collaborator."
          },
          "collaborator_type": {
            "$ref": "#/components/schemas/s12.tasks.v1.CollaboratorType"
          },
          "assigned_role": {
            "$ref": "#/components/schemas/s12.tasks.v1.CollaboratorRole"
          },
          "user": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.User"
          },
          "group": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Group"
          },
          "external_user": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.ExternalUser"
          },
          "contributor": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Contributor"
          }
        },
        "description": "A collaborator is somebody who is involved with the task.\nThey have either created the task, or are assigned to it."
      },
      "s12.tasks.v1.Task.Contributor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "The UUID uniquely identifying this contributor"
          },
          "name": {
            "type": "string",
            "description": "Optional. The contributor's name."
          },
          "email": {
            "type": "string",
            "description": "Optional. The contributor's email address."
          },
          "contact": {
            "type": "string",
            "description": "Optional. The contributor's (freetext) contact details."
          }
        },
        "title": "The contributor that raised the issue"
      },
      "s12.tasks.v1.Task.DateTimeAnswer": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "string",
            "format": "date-time",
            "title": "answer content for DateTimeItem"
          },
          "enable_date": {
            "type": "boolean",
            "title": "Enable date turns on input for date values"
          },
          "enable_time": {
            "type": "boolean",
            "title": "Enable date turns on input for time values"
          }
        },
        "title": "Answer returned for DateTimeItem"
      },
      "s12.tasks.v1.Task.DrawingAnswer": {
        "type": "object",
        "properties": {
          "media": {
            "$ref": "#/components/schemas/s12.common.Media"
          }
        },
        "title": "Answer returned for DrawingItem"
      },
      "s12.tasks.v1.Task.ExternalUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID uniquely identifying this external user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the external user."
          }
        },
        "description": "The external user that is assigned to a task."
      },
      "s12.tasks.v1.Task.Group": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "string",
            "description": "The UUID of this group."
          },
          "name": {
            "type": "string",
            "title": "The name of the group"
          }
        },
        "description": "The group that is assigned to a task."
      },
      "s12.tasks.v1.Task.IncidentContext": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of the incident"
          },
          "description": {
            "type": "string",
            "title": "Description of the incident"
          },
          "creator": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.User"
          },
          "status_id": {
            "type": "string",
            "title": "Status ID of the incident"
          },
          "category_id": {
            "type": "string",
            "title": "Category of the incident"
          }
        },
        "title": "context of an incident associated with the action"
      },
      "s12.tasks.v1.Task.Inspection": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "title": "ID of the inspection the action belongs to"
          },
          "inspection_name": {
            "type": "string",
            "title": "The name of the inspection the action belongs to"
          }
        },
        "title": "The inspection data of this task"
      },
      "s12.tasks.v1.Task.InspectionContext": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "title": "ID of the inspection associated with the action"
          },
          "inspection_name": {
            "type": "string",
            "title": "name of the inspection associated with the action"
          },
          "inspection_item_id": {
            "type": "string",
            "title": "ID of the inspectionItem associated with the action"
          },
          "inspection_item_name": {
            "type": "string",
            "title": "name of the inspectionItem associated with the action"
          },
          "inspection_item_type": {
            "type": "string",
            "title": "@deprecated The type of the inspectionItem associated with the action"
          },
          "inspection_item_path": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "The path(breadcrumbs) of the inspectionItem associated with the action"
          },
          "inspection_item_attachments": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Attachments"
          },
          "list_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.ListAnswer"
          },
          "text_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.TextAnswer"
          },
          "checkbox_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.CheckboxAnswer"
          },
          "media_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.MediaAnswer"
          },
          "signature_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.SignatureAnswer"
          },
          "drawing_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.DrawingAnswer"
          },
          "slider_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.SliderAnswer"
          },
          "datetime_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.DateTimeAnswer"
          },
          "address_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.AddressAnswer"
          },
          "switch_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.SwitchAnswer"
          },
          "temperature_answer": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.TemperatureAnswer"
          },
          "inspection_deleted": {
            "type": "boolean",
            "title": "Flag indicated whether the inspection has been deleted"
          }
        },
        "title": "context of inspection associated with the action"
      },
      "s12.tasks.v1.Task.InspectionItem": {
        "type": "object",
        "properties": {
          "inspection_item_id": {
            "type": "string",
            "title": "ID of the item in the inspection associated with the action"
          },
          "inspection_item_name": {
            "type": "string",
            "title": "The name of the item in the inspection associated with the action"
          },
          "inspection_item_type": {
            "type": "string",
            "title": "The type of the item in the inspection associated with the action"
          },
          "inspection_item_response_values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "The labels of the responses"
          }
        },
        "title": "The inspection item data of this task"
      },
      "s12.tasks.v1.Task.ListAnswer": {
        "type": "object",
        "properties": {
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.ListResponse"
            },
            "title": "Responses of inspection item"
          }
        },
        "title": "Answer returned for ListItem"
      },
      "s12.tasks.v1.Task.ListResponse": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "title": "Label for the response"
          },
          "color": {
            "$ref": "#/components/schemas/s12.common.Color"
          }
        },
        "title": "Response of List type InspectionItem"
      },
      "s12.tasks.v1.Task.MediaAnswer": {
        "type": "object",
        "properties": {
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.common.Media"
            },
            "title": "answer content of MediaItem"
          }
        },
        "title": "Answer returned for MediaItem"
      },
      "s12.tasks.v1.Task.NumberComparison": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Used to compare values against a single number."
      },
      "s12.tasks.v1.Task.RangeComparison": {
        "type": "object",
        "properties": {
          "lower": {
            "type": "number",
            "format": "double",
            "description": "Represents the lower value of the range."
          },
          "upper": {
            "type": "number",
            "format": "double",
            "description": "Represents the upper value of the range."
          }
        },
        "description": "Used to compare values within a range."
      },
      "s12.tasks.v1.Task.Reference": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/s12.tasks.v1.ReferenceType"
          },
          "id": {
            "type": "string",
            "description": "Required. Reference ID."
          },
          "inspection_context": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.InspectionContext"
          },
          "sensor_alert_context": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.SensorAlertContext"
          },
          "sensor_context": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.SensorContext"
          },
          "incident_context": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.IncidentContext"
          }
        },
        "title": "Reference is a type/id pair defined as:"
      },
      "s12.tasks.v1.Task.SensorAlertContext": {
        "type": "object",
        "properties": {
          "sensor_alert_id": {
            "type": "string",
            "title": "ID of sensor alert context associated with the action"
          },
          "level": {
            "$ref": "#/components/schemas/s12.tasks.v1.AlertEventLevel"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the alert event was created/updated."
          },
          "detected_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the first alert event was detected."
          },
          "sensor_id": {
            "type": "string",
            "title": "Sensor asset ID for which the event happened"
          },
          "site_name": {
            "type": "string",
            "title": "Name of the site at a time of event"
          },
          "metric_type": {
            "$ref": "#/components/schemas/s12.tasks.v1.MetricType"
          },
          "sensor_name": {
            "type": "string",
            "title": "Name of the sensor at a time of event"
          }
        },
        "title": "context of sensor alert associated with the action"
      },
      "s12.tasks.v1.Task.SensorContext": {
        "type": "object",
        "title": "context of sensor associated with the action"
      },
      "s12.tasks.v1.Task.SignatureAnswer": {
        "type": "object",
        "properties": {
          "media": {
            "$ref": "#/components/schemas/s12.common.Media"
          },
          "name": {
            "type": "string",
            "title": "name on the signature"
          },
          "signed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp for when the signature answer was last updated"
          }
        },
        "title": "Signature item stores user name and an image with signature"
      },
      "s12.tasks.v1.Task.Site": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the site associated with this task."
          },
          "name": {
            "type": "string",
            "description": "The name of the site associated with this task."
          },
          "region": {
            "type": "string",
            "description": "The region of the site associated with the task."
          },
          "area": {
            "type": "string",
            "title": "The area of the site associated with the task"
          }
        },
        "description": "The folder (site) data of this task."
      },
      "s12.tasks.v1.Task.SliderAnswer": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "number",
            "format": "double",
            "title": "number of sliderAnswer"
          },
          "max": {
            "type": "number",
            "format": "double",
            "description": "A double representing the maximum value allowed for this item. Negatives\nare allowed."
          },
          "min": {
            "type": "number",
            "format": "double",
            "description": "A double representing the minimum value allowed for this item. Negatives\nare allowed."
          }
        },
        "title": "Answer returned for SliderItem"
      },
      "s12.tasks.v1.Task.Status": {
        "type": "object",
        "properties": {
          "status_id": {
            "type": "string",
            "title": "An ID uniquely identifying this task status message.\nFor example: 'aa70d8a6-af37-44f4-8768d8899fe274c5'"
          },
          "key": {
            "type": "string",
            "title": "A pre-defined value that the system can use to handle\nthe particular label e.g. analytics, filter based on it\nA key may look like: \"to do\" | \"In progress\" | \"Done\" | \"Can't do\""
          },
          "label": {
            "type": "string",
            "title": "A label associated with the key, typically for display purposes"
          },
          "display_order": {
            "type": "integer",
            "format": "int32",
            "title": "Used to order this status when displaying a list of statuses"
          }
        },
        "title": "The task status"
      },
      "s12.tasks.v1.Task.SwitchAnswer": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "boolean",
            "title": "Answer content for SwitchItem"
          }
        },
        "description": "Answer returned for SwitchItem, exists in old inspections\nUsers can’t change answer to them & can’t attach actions to them either."
      },
      "s12.tasks.v1.Task.TemperatureAnswer": {
        "type": "object",
        "properties": {
          "temperature": {
            "type": "number",
            "format": "double",
            "title": "@deprecated. Use answer instead"
          },
          "display_unit": {
            "$ref": "#/components/schemas/s12.common.TemperatureUnit"
          },
          "between": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.RangeComparison"
          },
          "above": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.NumberComparison"
          },
          "below": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.NumberComparison"
          },
          "answer": {
            "type": "number",
            "format": "double",
            "title": "answer of TemperatureAnswer"
          }
        },
        "title": "Answer returned for temperatureItem"
      },
      "s12.tasks.v1.Task.TextAnswer": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "string",
            "title": "Text answer content"
          }
        },
        "title": "Answer returned for TextItem, TextSingleItem, ScannerItem type"
      },
      "s12.tasks.v1.Task.User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The UUID of this user."
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user."
          }
        },
        "description": "The user associated to the task. They could be a creator or assignee."
      },
      "s12.tasks.v1.TimelineItem": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "title": "The UUID of the timeline item"
          },
          "task_id": {
            "type": "string",
            "description": "The UUID of the task this timeline is associated with."
          },
          "creator": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.User"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "UTC Timestamp for the timeline item."
          },
          "item_type": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.Type"
          },
          "task_created_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskCreatedMessageData"
          },
          "task_assignee_added_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskAssigneeAddedMessageData"
          },
          "task_due_at_updated_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskDueAtUpdatedMessageData"
          },
          "task_status_updated_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskStatusUpdatedMessageData"
          },
          "task_priority_updated_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskPriorityUpdatedMessageData"
          },
          "task_comment_added_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskCommentAddedMessageData"
          },
          "task_image_uploaded_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskImageUploadedMessageData"
          },
          "task_site_updated_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskSiteUpdatedMessageData"
          },
          "task_category_updated_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskCategoryUpdatedMessageData"
          },
          "incident_created_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.IncidentCreatedMessageData"
          },
          "task_notification_sent_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskNotificationSentMessageData"
          },
          "task_media_uploaded_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskMediaUploadedMessageData"
          },
          "task_assignee_updated_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskAssigneeUpdatedMessageData"
          },
          "task_location_added_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskLocationAddedMessageData"
          },
          "task_inspection_completed_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskInspectionCompletedMessageData"
          },
          "task_inspection_deleted_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskInspectionDeletedMessageData"
          },
          "task_inspection_added_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskInspectionAddedMessageData"
          },
          "task_answer_added_data": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.TaskAnswerAddedMessageData"
          },
          "activity_creator": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.ActivityCreator"
          }
        },
        "description": "TimelineItem contains information about each item in the timeline."
      },
      "s12.tasks.v1.TimelineItem.ActivityCreator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of the individual who created this timeline item."
          },
          "name": {
            "type": "string",
            "description": "The name of the individual who created this timeline item."
          },
          "creator_type": {
            "$ref": "#/components/schemas/s12.tasks.v1.TimelineItem.ActivityCreatorType"
          }
        },
        "description": "Creator of the timeline item."
      },
      "s12.tasks.v1.TimelineItem.ActivityCreatorType": {
        "type": "string",
        "enum": [
          "TYPE_NOT_SET",
          "INTERNAL_USER",
          "EXTERNAL_USER"
        ],
        "default": "TYPE_NOT_SET",
        "description": "The type of individual who has created this timeline item.\n\n - TYPE_NOT_SET: An unknown type of creator.\n - INTERNAL_USER: The creator is an authenticated user within the organisation.\n - EXTERNAL_USER: The creator is an unauthenticated user who has been given external access\nto the task."
      },
      "s12.tasks.v1.TimelineItem.IncidentCreatedMessageData": {
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/s12.tasks.v1.Incident"
          }
        },
        "description": "Data about when an issue was created."
      },
      "s12.tasks.v1.TimelineItem.TaskAnswerAddedMessageData": {
        "type": "object",
        "properties": {
          "question_text": {
            "type": "string",
            "description": "The text of the question that was answered."
          },
          "answer_text": {
            "type": "string",
            "description": "The text of the answer that was provided."
          }
        },
        "description": "Data about when a custom question was answered on this issue."
      },
      "s12.tasks.v1.TimelineItem.TaskAssigneeAddedMessageData": {
        "type": "object",
        "properties": {
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
            },
            "description": "Data about the people assigned to the task."
          }
        },
        "description": "Data about when an assignee was added to the task."
      },
      "s12.tasks.v1.TimelineItem.TaskAssigneeUpdatedMessageData": {
        "type": "object",
        "properties": {
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Collaborator"
            },
            "description": "Assignees of the task that was updated."
          }
        },
        "description": "Data about when an assignee was updated."
      },
      "s12.tasks.v1.TimelineItem.TaskCategoryUpdatedMessageData": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "string",
            "description": "@deprecated. Use category instead.\nID of the category of the task that was updated.\nThe field has been deprecated, as more information about the category is\nin the `category` field."
          },
          "category": {
            "$ref": "#/components/schemas/s12.tasks.v1.Category"
          }
        },
        "description": "Data about when an issue's category was updated."
      },
      "s12.tasks.v1.TimelineItem.TaskCommentAddedMessageData": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The text value of the comment."
          }
        },
        "description": "Data about when a comment is added to a task."
      },
      "s12.tasks.v1.TimelineItem.TaskCreatedMessageData": {
        "type": "object",
        "properties": {
          "task": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task"
          }
        },
        "description": "Data about when an action was created."
      },
      "s12.tasks.v1.TimelineItem.TaskDueAtUpdatedMessageData": {
        "type": "object",
        "properties": {
          "due_at": {
            "type": "string",
            "format": "date-time",
            "description": "The new due date of the task."
          }
        },
        "description": "Data about when the due date of a task was changed."
      },
      "s12.tasks.v1.TimelineItem.TaskImageUploadedMessageData": {
        "type": "object",
        "properties": {
          "media": {
            "$ref": "#/components/schemas/s12.common.Media"
          }
        },
        "description": "Data about when an image was added to a task. @deprecated\nThis has been deprecated in favour of media messages.\nThis is because the media messages allow videos and PDF as well as images."
      },
      "s12.tasks.v1.TimelineItem.TaskInspectionAddedMessageData": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "title": "ID of the inspection that is being added"
          },
          "template_title": {
            "type": "string",
            "title": "Title of template being added"
          }
        },
        "description": "Data about when an inspection is linked to this issue."
      },
      "s12.tasks.v1.TimelineItem.TaskInspectionCompletedMessageData": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "description": "ID of the completed inspection."
          },
          "template_title": {
            "type": "string",
            "description": "The title of the template this inspection was created from."
          }
        },
        "description": "Data about when an inspection linked to this issue is completed."
      },
      "s12.tasks.v1.TimelineItem.TaskInspectionDeletedMessageData": {
        "type": "object",
        "properties": {
          "inspection_id": {
            "type": "string",
            "description": "ID of the deleted inspection."
          },
          "template_title": {
            "type": "string",
            "description": "The title of the template this inspection was created from."
          }
        },
        "description": "Data about when an inspection linked to this issue was deleted."
      },
      "s12.tasks.v1.TimelineItem.TaskLocationAddedMessageData": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.AddressLocation"
          }
        },
        "description": "Data about when a location is added to a task."
      },
      "s12.tasks.v1.TimelineItem.TaskMediaUploadedMessageData": {
        "type": "object",
        "properties": {
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.common.Media"
            },
            "description": "Data about the media that were added at this time.\nUsers can add multiple pieces of media at once, so this may contain data\nabout multiple pieces of media."
          }
        },
        "description": "Data about when media files were added to the task."
      },
      "s12.tasks.v1.TimelineItem.TaskNotificationSentMessageData": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "UUIDs for any groups that received a notification in this timeline item.\nIDs that belong to the task's specific category. This is deprecated in\nfavour of the `groups` field."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Group"
            },
            "description": "Data about any groups who received a notification in this timeline item."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.User"
            },
            "description": "Data about any individual users who received a notification in this\ntimeline item."
          },
          "external_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.ExternalUser"
            },
            "description": "Data about any external users who received a notification in this\ntimeline item."
          },
          "site_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Group"
            },
            "description": "Groups that received a notification due to site based notification configuration."
          },
          "site": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Site"
          }
        },
        "description": "Data about when a notification is sent about a task."
      },
      "s12.tasks.v1.TimelineItem.TaskPriorityUpdatedMessageData": {
        "type": "object",
        "properties": {
          "priority_id": {
            "type": "string",
            "description": "The new priority UUID of the task."
          }
        },
        "description": "Data about when the priority of a task was updated."
      },
      "s12.tasks.v1.TimelineItem.TaskSiteUpdatedMessageData": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/s12.tasks.v1.Task.Site"
          },
          "site_hierarchy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.tasks.v1.Task.Site"
            },
            "description": "Information about the hierarchy of the site.\nThis is ordered in ascending order, ie: Site -> Area -> Region -> State -> Country."
          }
        },
        "description": "Data about when the folder (site) of this task was updated."
      },
      "s12.tasks.v1.TimelineItem.TaskStatusUpdatedMessageData": {
        "type": "object",
        "properties": {
          "status_id": {
            "type": "string",
            "description": "The new status UUID of the task."
          }
        },
        "description": "Data about when the status of a task was updated."
      },
      "s12.tasks.v1.TimelineItem.Type": {
        "type": "string",
        "enum": [
          "TIMELINE_ITEM_UNKNOWN",
          "TASK_CREATED",
          "TASK_TITLE_UPDATED",
          "TASK_DESCRIPTION_UPDATED",
          "TASK_ASSIGNEE_ADDED",
          "TASK_ASSIGNEE_REMOVED",
          "TASK_DUE_AT_UPDATED",
          "TASK_STATUS_UPDATED",
          "TASK_PRIORITY_UPDATED",
          "TASK_COMMENT_ADDED",
          "TASK_IMAGE_UPLOADED",
          "TASK_SITE_UPDATED",
          "TASK_DELETED",
          "TASK_CATEGORY_UPDATED",
          "INCIDENT_CREATED",
          "TASK_NOTIFICATION_SENT",
          "TASK_MEDIA_UPLOADED",
          "TASK_ASSIGNEE_UPDATED",
          "TASK_LOCATION_ADDED",
          "TASK_INSPECTION_COMPLETED",
          "TASK_INSPECTION_DELETED",
          "TASK_INSPECTION_ADDED",
          "TASK_ANSWER_ADDED"
        ],
        "default": "TIMELINE_ITEM_UNKNOWN",
        "description": "The type of the timeline item.\n\n - TIMELINE_ITEM_UNKNOWN: Removed fields related to the cancelled actions/issues integration\nAn unknown type of timeline item.\n - TASK_CREATED: A timeline item for the creation of an action.\n - TASK_TITLE_UPDATED: A timeline item indicating that the title of the task has been updated.\n - TASK_DESCRIPTION_UPDATED: A timeline item indicating that the task's description has been updated.\n - TASK_ASSIGNEE_ADDED: A timeline item indicating that an assignee has been added to the task.\n - TASK_ASSIGNEE_REMOVED: A timeline item indicating that an assignee has been removed from the\ntask.\n - TASK_DUE_AT_UPDATED: A timeline item indicating that the due date of the task has been\nupdated.\n - TASK_STATUS_UPDATED: A timeline item indicating that the status of the task has been updated.\n - TASK_PRIORITY_UPDATED: A timeline item indicating that the priority of the task has been\nupdated.\n - TASK_COMMENT_ADDED: A timeline item indicating that a comment has been added to the task.\n - TASK_IMAGE_UPLOADED: A timeline item indicating that an image was added to the task.\nThis field is deprecated, and was replaced by the `TASK_MEDIA_ADDED`\ntype. It is kept here to maintain backwards compatibility.\n - TASK_SITE_UPDATED: A timeline item indicating that the folder (site) of the task has been\nupdated.\n - TASK_DELETED: A timeline item indicating that this task has been deleted.\n - TASK_CATEGORY_UPDATED: A timeline item indicating that the category of this task has been\nupdated. This type is only relevant to issues.\n - INCIDENT_CREATED: A timeline item for the creation of an issue.\n - TASK_NOTIFICATION_SENT: A timeline item indicating that a notification about this task has been\nsent.\n - TASK_MEDIA_UPLOADED: A timeline item indicating that media has been added to this task.\n - TASK_ASSIGNEE_UPDATED: reserved 17, 18, 19;\n17 - 19 reserved for the cancelled actions/issues integration feature.\nA timeline item indicating that the assignee of this task has been\nupdated.\n - TASK_LOCATION_ADDED: A timeline item indicating the geolocation of this issue.\nThis type is only relevant to issues.\n - TASK_INSPECTION_COMPLETED: A timeline item indicating that an inspection that has been linked to an\nissue has been completed. This type is only relevant to issues.\n - TASK_INSPECTION_DELETED: A timeline item indicating that an inspection that has been linked to an\nissue has been deleted. This type is only relevant to issues.\n - TASK_INSPECTION_ADDED: A timeline item indicating that an inspection has been linked to an\nissue. This type is only relevant to issues.\n - TASK_ANSWER_ADDED: A timeline item indicating that an issue's custom question has been\nanswered. This type is only relevant to issues."
      },
      "s12.tasks.v1.UpdateAssigneesResponse": {
        "type": "object",
        "title": "UpdateAssigneesResponse represents the response for `UpdateAssignees`"
      },
      "s12.tasks.v1.UpdateSiteResponse": {
        "type": "object"
      },
      "s12.templates.v1.ArchiveTemplateRequest": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "title": "The unique identifier for the template"
          }
        },
        "title": "The parameter body to `ArchiveTemplate`"
      },
      "s12.templates.v1.ArchiveTemplateResponse": {
        "type": "object",
        "title": "Result returned from ArchiveTemplate"
      },
      "s12.thepub.v1.AddNewUserToGroupResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user IDs in the group."
          }
        },
        "description": "Result returned from `AddNewUserToGroup`",
        "title": "AddNewUserToGroupResponse"
      },
      "s12.thepub.v1.AddUserRequest": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user."
          },
          "password": {
            "type": "string",
            "description": "The password of the user."
          },
          "reset_password_required": {
            "type": "boolean",
            "description": "Should the user user receive an email to reset their password the first\ntime they access iAuditor."
          },
          "message": {
            "type": "string",
            "description": "Message passed to the newly created user."
          },
          "seat_type": {
            "$ref": "#/components/schemas/s12.thepub.v1.AddUserRequest.SeatType"
          }
        },
        "description": "The parameters for `AddUser`",
        "title": "AddUserRequest"
      },
      "s12.thepub.v1.AddUserRequest.SeatType": {
        "type": "string",
        "enum": [
          "full",
          "free"
        ],
        "default": "full",
        "title": "- full: Full seat\n - free: Free seat"
      },
      "s12.thepub.v1.AddUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/s12.thepub.v1.AddUserResponse.UserResponse"
          }
        },
        "description": "Result returned from `AddUser`",
        "title": "AddUserResponse"
      },
      "s12.thepub.v1.AddUserResponse.UserResponse": {
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "The first name of the created user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the created user."
          },
          "email": {
            "type": "string",
            "description": "The email of the created user."
          },
          "user_id": {
            "type": "string",
            "description": "The id of the created user."
          }
        },
        "title": "User response"
      },
      "s12.thepub.v1.CreateGRSResponseResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/s12.thepub.v1.GetGRSResponse"
          }
        },
        "description": "Result returned from `CreateGRSResponse`",
        "title": "CreateGRSResponseResponse"
      },
      "s12.thepub.v1.CreateGlobalResponseSetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the global response set."
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.UpdateGRSResponse"
            },
            "description": "The responses to add to the global response set."
          }
        },
        "description": "The parameters for `CreateGlobalResponseSet`",
        "title": "CreateGlobalResponseSetRequest"
      },
      "s12.thepub.v1.CreateGlobalResponseSetResponse": {
        "type": "object",
        "properties": {
          "responseset_id": {
            "type": "string",
            "description": "The id of the global response set."
          },
          "name": {
            "type": "string",
            "description": "The name of the global response set."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the global response set was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the global response set was last updated."
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.GetGRSResponse"
            },
            "description": "The responses in the global response set."
          }
        },
        "description": "Result returned from `CreateGlobalResponseSet`",
        "title": "CreateGlobalResponseSetResponse"
      },
      "s12.thepub.v1.CreateGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group to be created."
          }
        },
        "description": "The parameters for `CreateGroup`",
        "title": "CreateGroupRequest"
      },
      "s12.thepub.v1.CreateGroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the group."
          },
          "name": {
            "type": "string",
            "description": "The name of the group."
          }
        },
        "description": "Result returned from `CreateGroup`",
        "title": "CreateGroupResponse"
      },
      "s12.thepub.v1.DeleteGRSResponseResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "If the response was deleted."
          }
        },
        "description": "Result returned from `DeleteGRSResponse`",
        "title": "DeleteGRSResponseResponse"
      },
      "s12.thepub.v1.DeleteGlobalResponseSetResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "If the global response set was deleted."
          }
        },
        "description": "Result returned from `DeleteGlobalResponseSet`",
        "title": "DeleteGlobalResponseSetResponse"
      },
      "s12.thepub.v1.DeleteInspectionWebReportLinkResponse": {
        "type": "object",
        "description": "Result returned from `DeleteInspectionWebReportLink`",
        "title": "DeleteInspectionWebReportLinkResponse"
      },
      "s12.thepub.v1.GetGRSResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the response."
          },
          "label": {
            "type": "string",
            "description": "The label of the response."
          },
          "short_label": {
            "type": "string",
            "description": "The short label of the response."
          }
        },
        "description": "A global response set response used for getting a GRS",
        "title": "GetGRSResponse"
      },
      "s12.thepub.v1.GetGlobalResponseSetResponse": {
        "type": "object",
        "properties": {
          "responseset_id": {
            "type": "string",
            "description": "The id of the global response set."
          },
          "name": {
            "type": "string",
            "description": "The name of the global response set."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the global response set was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the global response set was last updated."
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.GetGRSResponse"
            },
            "description": "The responses in the global response set."
          }
        },
        "description": "Result returned from `GetGlobalResponseSet`",
        "title": "GetGlobalResponseSetResponse"
      },
      "s12.thepub.v1.GetInspectionDeepLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The deep link for the inspection."
          }
        },
        "description": "Result returned from `GetInspectionDeepLink`",
        "title": "GetInspectionDeepLinkResponse"
      },
      "s12.thepub.v1.GetInspectionWebReportLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The web report link for the inspection."
          }
        },
        "description": "Result returned from `GetInspectionWebReportLink`",
        "title": "GetInspectionWebReportLinkResponse"
      },
      "s12.thepub.v1.GetUserGroupsResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.GetUserGroupsResponse.Group"
            },
            "description": "The groups that the user is a member of."
          }
        },
        "description": "Result returned from `GetUserGroups`",
        "title": "GetUserGroupsResponse"
      },
      "s12.thepub.v1.GetUserGroupsResponse.Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the group."
          },
          "name": {
            "type": "string",
            "description": "The name of the group."
          },
          "type": {
            "$ref": "#/components/schemas/s12.thepub.v1.GetUserGroupsResponse.Group.Type"
          }
        },
        "description": "A group returned from `GetUserGroups`",
        "title": "GetUserGroupsResponseGroup"
      },
      "s12.thepub.v1.GetUserGroupsResponse.Group.Type": {
        "type": "string",
        "enum": [
          "group",
          "organisation"
        ],
        "default": "group",
        "title": "- group: Group\n - organisation: Organisation"
      },
      "s12.thepub.v1.GetUserResponse": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The id of the user."
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user."
          },
          "status": {
            "$ref": "#/components/schemas/s12.thepub.v1.ThePubUserStatus"
          }
        },
        "description": "Result returned from `GetUser`",
        "title": "GetUserResponse"
      },
      "s12.thepub.v1.Inspection": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "The template this inspection was conducted from."
          },
          "audit_id": {
            "type": "string",
            "description": "The id of this inspection."
          },
          "archived": {
            "type": "boolean",
            "description": "If this inspection is archived."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this inspection was created on the server."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date this inspection was last updated on the server."
          },
          "audit_data": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.AuditData"
          },
          "template_data": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.TemplateData"
          },
          "header_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Item"
            },
            "description": "The title page items of the inspection."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Item"
            },
            "description": "The items of the inspection."
          }
        }
      },
      "s12.thepub.v1.Inspection.AuditData": {
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32",
            "description": "The score of the inspection."
          },
          "total_score": {
            "type": "integer",
            "format": "int32",
            "description": "The total possible score of the inspection."
          },
          "percentage": {
            "type": "integer",
            "format": "int32",
            "description": "The percentage of the inspection score."
          },
          "name": {
            "type": "string",
            "description": "The name of the inspection."
          },
          "duration": {
            "type": "string",
            "format": "int64",
            "description": "The duration of the inspection."
          },
          "authorship": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Authorship"
          },
          "date_completed": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the inspection was completed."
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the inspection was last modified."
          },
          "date_started": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the inspection was started."
          },
          "site": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.AuditData.Site"
          }
        }
      },
      "s12.thepub.v1.Inspection.AuditData.Site": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the site this inspection was conducted at."
          }
        }
      },
      "s12.thepub.v1.Inspection.Authorship": {
        "type": "object",
        "properties": {
          "device_id": {
            "type": "string",
            "description": "The ID of the device that this was last modified on."
          },
          "owner": {
            "type": "string",
            "description": "The name of the user who created this document."
          },
          "owner_id": {
            "type": "string",
            "description": "The id of the user who created this document."
          },
          "author": {
            "type": "string",
            "description": "The name of the user who last modified this document."
          },
          "author_id": {
            "type": "string",
            "description": "The id of the user who last modified this document."
          }
        }
      },
      "s12.thepub.v1.Inspection.Item": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "description": "The id of the item."
          },
          "label": {
            "type": "string",
            "description": "The label of the item."
          },
          "type": {
            "type": "string",
            "description": "The type of the item."
          },
          "children": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The child items of the item."
          },
          "parent_id": {
            "type": "string",
            "description": "The parent item of the item."
          },
          "responses": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Item.Responses"
          }
        }
      },
      "s12.thepub.v1.Inspection.Item.Responses": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text response."
          },
          "value": {
            "type": "string",
            "description": "Value response. Used for sliders, checkboxes, and switches."
          },
          "name": {
            "type": "string",
            "description": "Someone's Name. Used with signature, location and weather items."
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "Time of action. Used only with barcode and signature items."
          },
          "location_text": {
            "type": "string",
            "description": "Location represented as text (address or coordinates)."
          },
          "location": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Item.Responses.Location"
          },
          "selected": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Response"
            },
            "description": "The selected items from an response set."
          },
          "failed": {
            "type": "boolean",
            "description": "If the response is considered failed."
          },
          "media": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Media"
            },
            "description": "The media of the response."
          },
          "image": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Media"
          },
          "scoring": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Item.Responses.Scoring"
          },
          "notes": {
            "type": "string",
            "description": "Notes added to the response."
          }
        }
      },
      "s12.thepub.v1.Inspection.Item.Responses.Location": {
        "type": "object",
        "properties": {
          "administrative_area": {
            "type": "string",
            "description": "Ther administrative area of the location."
          },
          "country": {
            "type": "string",
            "description": "The country of the location."
          },
          "formatted_address": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The formated address of the location."
          },
          "geometry": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Item.Responses.Location.Geometry"
          },
          "iso_country_code": {
            "type": "string",
            "description": "The ISO Country Code of the location."
          },
          "locality": {
            "type": "string",
            "description": "The locality of the location."
          },
          "name": {
            "type": "string",
            "description": "The name of the location."
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code of the location."
          },
          "sub_administrative_area": {
            "type": "string",
            "description": "The sub administrative area of the location."
          },
          "sub_locality": {
            "type": "string",
            "description": "The sub locality of the location."
          },
          "sub_thoroughfare": {
            "type": "string",
            "description": "The sub thoroughfare of the location."
          },
          "thoroughfare": {
            "type": "string",
            "description": "The thoroughfare of the location."
          }
        }
      },
      "s12.thepub.v1.Inspection.Item.Responses.Location.Geometry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of geometry."
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "description": "The coordinates that define the geometry."
          }
        }
      },
      "s12.thepub.v1.Inspection.Item.Responses.Scoring": {
        "type": "object",
        "properties": {
          "combined_score": {
            "type": "number",
            "format": "double",
            "description": "The combined score of the category."
          },
          "combined_max_score": {
            "type": "integer",
            "format": "int64",
            "description": "The combined maximum score of the category."
          },
          "combined_score_percentage": {
            "type": "number",
            "format": "double",
            "description": "The combined score percentage of the category."
          },
          "score": {
            "type": "number",
            "format": "double",
            "description": "The score of the item."
          },
          "max_score": {
            "type": "integer",
            "format": "int64",
            "description": "The maximum score of the category."
          },
          "score_percentage": {
            "type": "number",
            "format": "double",
            "description": "The score percentage of the category."
          }
        }
      },
      "s12.thepub.v1.Inspection.Media": {
        "type": "object",
        "properties": {
          "date_created": {
            "type": "string",
            "format": "date-time",
            "description": "The date the media was created."
          },
          "file_ext": {
            "type": "string",
            "description": "The file extension of the media."
          },
          "media_id": {
            "type": "string",
            "description": "The id of the media."
          },
          "label": {
            "type": "string",
            "description": "The label of the media."
          },
          "href": {
            "type": "string",
            "description": "The url to retrieve the media."
          }
        }
      },
      "s12.thepub.v1.Inspection.Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the response."
          },
          "colour": {
            "type": "string",
            "description": "The colour of the response."
          },
          "enable_score": {
            "type": "boolean",
            "description": "If scoring is enabled for the response."
          },
          "label": {
            "type": "string",
            "description": "The label of the response."
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "description": "The score of the response."
          },
          "short_label": {
            "type": "string",
            "description": "The short label of the response."
          },
          "type": {
            "type": "string",
            "title": "The type of the response. `question` or `list`"
          }
        }
      },
      "s12.thepub.v1.Inspection.TemplateData": {
        "type": "object",
        "properties": {
          "authorship": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Authorship"
          },
          "metadata": {
            "$ref": "#/components/schemas/s12.thepub.v1.Inspection.TemplateData.Metadata"
          },
          "response_sets": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/s12.thepub.v1.Inspection.TemplateData.ResponseSet"
            },
            "description": "Response sets used in the template."
          }
        }
      },
      "s12.thepub.v1.Inspection.TemplateData.Metadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template."
          },
          "description": {
            "type": "string",
            "description": "The description of the template."
          }
        }
      },
      "s12.thepub.v1.Inspection.TemplateData.ResponseSet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the response set."
          },
          "type": {
            "type": "string",
            "description": "The type of the response set."
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.Inspection.Response"
            },
            "description": "The responses of the response set."
          }
        }
      },
      "s12.thepub.v1.ListAllGlobalResponseSetsResponse": {
        "type": "object",
        "properties": {
          "response_sets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.ListAllGlobalResponseSetsResponse.GlobalResponseSet"
            },
            "description": "The global response sets."
          }
        },
        "description": "Result returned from `ListAllGlobalResponseSets`",
        "title": "ListAllGlobalResponseSetsResponse"
      },
      "s12.thepub.v1.ListAllGlobalResponseSetsResponse.GlobalResponseSet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the global response set."
          },
          "name": {
            "type": "string",
            "description": "The name of the global response set."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date the global response set was created."
          }
        },
        "description": "A global response set",
        "title": "GlobalResponseSet"
      },
      "s12.thepub.v1.ListGroupsResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.ListGroupsResponse.Group"
            },
            "description": "The groups returned by the request."
          }
        },
        "description": "Result returned from `ListGroups`",
        "title": "ListGroupsResponse"
      },
      "s12.thepub.v1.ListGroupsResponse.Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the group."
          },
          "name": {
            "type": "string",
            "description": "The name of the group."
          }
        },
        "description": "A group returned by `ListGroups`",
        "title": "Group"
      },
      "s12.thepub.v1.ListUsersInGroupResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "The number of users in the group."
          },
          "offset": {
            "type": "integer",
            "format": "int32",
            "description": "The offset of the request."
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "The limit of the request."
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.User"
            },
            "description": "The users in the group."
          }
        },
        "description": "Result returned from `ListUsersInGroup`",
        "title": "ListUsersInGroupResponse"
      },
      "s12.thepub.v1.RemoveUserResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "If the user was removed from the group."
          }
        },
        "description": "Result returned from `RemoveUser`",
        "title": "RemoveUserResponse"
      },
      "s12.thepub.v1.SearchUsersRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emails to filter by. Required."
          }
        },
        "description": "The parameters for `SearchUsers`",
        "title": "SearchUsersRequest"
      },
      "s12.thepub.v1.SearchUsersResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/s12.thepub.v1.User"
            },
            "description": "The users that match the search criteria."
          }
        },
        "description": "Result returned from `SearchUsers`",
        "title": "SearchUsersResponse"
      },
      "s12.thepub.v1.ShareInspectionRequest.Share": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user or group to share with."
          },
          "permission": {
            "$ref": "#/components/schemas/s12.thepub.v1.ShareInspectionRequest.Share.Permissions"
          }
        },
        "description": "The share used in `SearchInspections`",
        "title": "ShareInspectionShare"
      },
      "s12.thepub.v1.ShareInspectionRequest.Share.Permissions": {
        "type": "string",
        "enum": [
          "view",
          "edit",
          "delete"
        ],
        "default": "view",
        "description": " - view: The user can view the inspection.\n - edit: The user can edit the inspection.\n - delete: The user can delete the inspection."
      },
      "s12.thepub.v1.StartInspectionRequest": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "ID of the template to start an inspection from."
          }
        },
        "description": "The parameters for `StartInspection`",
        "title": "StartInspectionRequest"
      },
      "s12.thepub.v1.StartInspectionResponse": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "The id of the template."
          },
          "audit_id": {
            "type": "string",
            "description": "The id of the inspection."
          },
          "archived": {
            "type": "boolean",
            "description": "Specifies if the inspection is archived or not."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the inspection was created."
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the inspection was last modified."
          }
        },
        "description": "Result returned from `StartInspection`",
        "title": "StartInspectionResponse"
      },
      "s12.thepub.v1.ThePubUserStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ],
        "default": "active",
        "description": "- active: Active user.\n - inactive: Inactive User",
        "title": "ThePubUserStatus"
      },
      "s12.thepub.v1.UpdateGRSResponse": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The label of the response."
          },
          "short_label": {
            "type": "string",
            "description": "The short label of the response."
          }
        },
        "description": "A global response set response used for updating/creating",
        "title": "UpdateGRSResponse"
      },
      "s12.thepub.v1.UpdateGRSResponseResponse": {
        "type": "object",
        "properties": {
          "response": {
            "$ref": "#/components/schemas/s12.thepub.v1.GetGRSResponse"
          }
        },
        "description": "Result returned from `UpdateGRSResponse`",
        "title": "UpdateGRSResponseResponse"
      },
      "s12.thepub.v1.UpdateGlobalResponseSetResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the global response set."
          },
          "ok": {
            "type": "boolean",
            "description": "If the global response set was updated."
          }
        },
        "description": "Result returned from `UpdateGlobalResponseSet`",
        "title": "UpdateGlobalResponseSetResponse"
      },
      "s12.thepub.v1.UpdateUserResponse": {
        "type": "object",
        "description": "Result returned from `UpdateUser`",
        "title": "UpdateUserResponse"
      },
      "s12.thepub.v1.User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user."
          },
          "firstname": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastname": {
            "type": "string",
            "description": "The last name of the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user."
          },
          "status": {
            "$ref": "#/components/schemas/s12.thepub.v1.ThePubUserStatus"
          }
        },
        "description": "A user returned from search and list opperations",
        "title": "ListUsersInGroupUser"
      }
    },
    "securitySchemes": {
      "BearerAuthentication": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "BearerAuthentication": []
    }
  ]
}